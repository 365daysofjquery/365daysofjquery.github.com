<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>365 Days of jQuery</title>
	<link href="http://365daysofjquery.github.com/atom.xml" rel="self"/>
	<link href="http://365daysofjquery.github.com/"/>
	<updated>2013-04-13T14:05:13+01:00</updated>
	<id>http://365daysofjquery.github.com</id>
	<author>
		<name>365 Days of jQuery</name>
	</author>
	
	<entry>
		<title>Demo 039 - Click</title>
		<link href="http://365daysofjquery.github.com/Demo-039"/>
		<updated>2013-02-08T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-039</id>
		<content type="html">&lt;style&gt;

	.clickMe {
		cursor: pointer;
	}

&lt;/style&gt;

&lt;div class=&quot;clickMe&quot;&gt;Click me to make me red!&lt;/div&gt;

&lt;script&gt;

	$('div.clickMe').click(function(){
		$('div.clickMe').css('color','red');
	});

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 039 - Click</title>
		<link href="http://365daysofjquery.github.com/Day-039"/>
		<updated>2013-02-08T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-039</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-012&quot;&gt;Day 012&lt;/a&gt;, we used &lt;code&gt;.css&lt;/code&gt; to manipulate elements when the page loads, in order to have the changes made when a user clicks an element, it's possible to use &lt;code&gt;.click&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.click&lt;/code&gt; is triggered when the mouse button is depressed and then released whilst inside the element.&lt;/p&gt;

&lt;p&gt;Here's an example, in our HTML if we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;clickMe&quot;&amp;gt;Click me to make me red!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then with jQuery we add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.clickMe').click(function(){
    $('div.clickMe').css('color','red');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out the &lt;a href=&quot;/Demo-039&quot;&gt;Demo&lt;/a&gt; to see it in action.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 038 - Append and Prepend</title>
		<link href="http://365daysofjquery.github.com/Demo-038"/>
		<updated>2013-02-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-038</id>
		<content type="html">&lt;ul&gt;
	&lt;li class=&quot;one&quot;&gt;List Item One&lt;/li&gt;
	&lt;li class=&quot;three&quot;&gt;List Item Three&lt;/li&gt;
	&lt;li class=&quot;five&quot;&gt;List Item Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul li.one').append('&lt;span class=&quot;two&quot;&gt;&quot;List Item Two&quot;&lt;/span&gt;');
	$('ul li.five').prepend('&lt;span class=&quot;four&quot;&gt;&quot;List Item Four&quot;&lt;/span&gt;');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 038 - Append and Prepend</title>
		<link href="http://365daysofjquery.github.com/Day-038"/>
		<updated>2013-02-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-038</id>
		<content type="html">&lt;p&gt;As well as using &lt;code&gt;.after&lt;/code&gt; and &lt;code&gt;.before&lt;/code&gt;, it's possible to &lt;code&gt;.append&lt;/code&gt; and &lt;code&gt;.prepend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example, in our HTML if we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class=&quot;one&quot;&amp;gt;List Item One&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;three&quot;&amp;gt;List Item Three&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;five&quot;&amp;gt;List Item Five&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then with jQuery we add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li.one').append('&amp;lt;span class=&quot;two&quot;&amp;gt;&quot;List Item Two&quot;&amp;lt;/span&amp;gt;');
$('ul li.five').prepend('&amp;lt;span class=&quot;four&quot;&amp;gt;&quot;List Item Four&quot;&amp;lt;/span&amp;gt;');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line appends a span element to the list item with a class of &lt;code&gt;one&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second line prepends a span element to the list item with a class &lt;code&gt;five&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;/Demo-038&quot;&gt;Demo&lt;/a&gt; and inspect the elements to see exactly where the span elements lie.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 037 - After and Before</title>
		<link href="http://365daysofjquery.github.com/Demo-037"/>
		<updated>2013-02-06T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-037</id>
		<content type="html">&lt;ul&gt;
	&lt;li class=&quot;one&quot;&gt;List Item One&lt;/li&gt;
	&lt;li class=&quot;three&quot;&gt;List Item Three&lt;/li&gt;
	&lt;li class=&quot;five&quot;&gt;List Item Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul li.one').after('&lt;li class=&quot;two&quot;&gt;List Item Two&lt;/li&gt;');
	$('ul li.five').before('&lt;li class=&quot;four&quot;&gt;List Item Four&lt;/li&gt;');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 037 - After and Before</title>
		<link href="http://365daysofjquery.github.com/Day-037"/>
		<updated>2013-02-06T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-037</id>
		<content type="html">&lt;p&gt;To add content after or before, you can simply use &lt;code&gt;.after&lt;/code&gt; and &lt;code&gt;.before&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our HTML if we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class=&quot;one&quot;&amp;gt;List Item One&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;three&quot;&amp;gt;List Item Three&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;five&quot;&amp;gt;List Item Five&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then with jQuery we add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li.one').after('&amp;lt;li class=&quot;two&quot;&amp;gt;List Item Two&amp;lt;/li&amp;gt;');
$('ul li.five').before('&amp;lt;li class=&quot;four&quot;&amp;gt;List Item Four&amp;lt;/li&amp;gt;');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line adds a list item with a class of &lt;code&gt;two&lt;/code&gt; after the list item with a class of &lt;code&gt;one&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second line adds a list item with a class of &lt;code&gt;four&lt;/code&gt; before the list item with a class &lt;code&gt;five&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's the results &lt;a href=&quot;/Demo-037&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 036 - Arrays</title>
		<link href="http://365daysofjquery.github.com/Demo-036"/>
		<updated>2013-02-05T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-036</id>
		<content type="html">&lt;p&gt;var myArray = ['Array element one', 'Array element two', 'Array element three'];&lt;/p&gt;

&lt;p&gt;View the console to see the results for the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;console.log(myArray[0]);&lt;/li&gt;
	&lt;li&gt;console.log(myArray[1]);&lt;/li&gt;
	&lt;li&gt;console.log(myArray[2]);&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	var myArray = ['Array element one', 'Array element two', 'Array element three'];

	console.log(myArray[0]);
	console.log(myArray[1]);
	console.log(myArray[2]);

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 036 - Arrays</title>
		<link href="http://365daysofjquery.github.com/Day-036"/>
		<updated>2013-02-05T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-036</id>
		<content type="html">&lt;p&gt;Arrays look a bit like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myArray = ['Array element one', 'Array element two', 'Array element three'];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They are zero-indexed, meaning that in this case &lt;code&gt;Array element one&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/Demo-036&quot;&gt;Demo&lt;/a&gt;, if you inspect the console it's possible to call the array using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(myArray[0]);
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 035 - The Times They Are a-Changin'</title>
		<link href="http://365daysofjquery.github.com/Day-035"/>
		<updated>2013-02-04T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-035</id>
		<content type="html">&lt;p&gt;Sorry for the lack of updates recently.&lt;/p&gt;

&lt;p&gt;This has been due to two things, firstly I've not been well and secondly at &lt;a href=&quot;http://twitter.com/edgeconf&quot;&gt;@edgeconf&lt;/a&gt; I was chatting to &lt;a href=&quot;http://twitter.com/rem&quot;&gt;@rem&lt;/a&gt; regarding his thoughts on 365 Days of jQuery.&lt;/p&gt;

&lt;p&gt;Remy mentioned it's a long time to devote solely to one JavaScript library. He suggested calling it '365 Days of Anything'. Being somewhat of a web hero of mine I'm inclined to agree with him.&lt;/p&gt;

&lt;p&gt;It's my intention to keep 365 Days of jQuery going, but to concentrate on other areas as well, I'm currently looking at starting up an event &lt;a href=&quot;http://www.simonowendesign.co.uk/manchester-front-end-web-development-meetup/&quot;&gt;#McrFRED&lt;/a&gt; and hope to have more information on this soon.&lt;/p&gt;

&lt;p&gt;As always, any contributions and pull requests via GitHub would be great.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 034 - Performance Testing</title>
		<link href="http://365daysofjquery.github.com/Day-034"/>
		<updated>2013-02-03T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-034</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http://jsperf.com/&quot;&gt;http://jsperf.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This site is awesome. It allows you to easily setup and run benchmark tests.&lt;/p&gt;

&lt;p&gt;Here's difference in performance for &lt;a href=&quot;/Day-033&quot;&gt;Day-33&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsperf.com/number-vs-operator&quot;&gt;http://jsperf.com/number-vs-operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test1 has the code using &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Test2 has the code using &lt;code&gt;operator&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;number      5 + Number('5')     24,572,246      ±0.86%     10% slower
operator    5 + +'5'            27,193,087      ±0.62%     fastest
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 033 - Unary Plus Operator</title>
		<link href="http://365daysofjquery.github.com/Demo-033"/>
		<updated>2013-02-02T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-033</id>
		<content type="html">&lt;h2&gt;String&lt;/h2&gt;
&lt;p&gt;5 + '5' = &lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Number&lt;/h2&gt;
&lt;p&gt;5 + Number('5') = &lt;span class=&quot;number&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Unary Plus Operator&lt;/h2&gt;
&lt;p&gt;5 + +'5' = &lt;span class=&quot;unary-plus&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script&gt;

	$('.string').html(

		5 + '5'

	)

	$('.number').html(

		5 + Number('5')

	)

	$('.unary-plus').html(

		5 + +'5'

	)

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 033 - Unary Plus Operator</title>
		<link href="http://365daysofjquery.github.com/Day-033"/>
		<updated>2013-02-02T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-033</id>
		<content type="html">&lt;p&gt;In the &lt;a href=&quot;/Day-032&quot;&gt;previous day&lt;/a&gt; you looked at how it's possible to concatenate strings, but what if you want a string to work as a number?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 + '5'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will give you the number 5, then concatenate 5, giving you 55.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 + Number('5')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case the string will be converted to a number, giving you 10.&lt;/p&gt;

&lt;p&gt;It's also possible to do the same thing using the 'Unary Plus Operator' like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 + +'5'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although &lt;code&gt;+'5'&lt;/code&gt; is less code, you might want to use &lt;code&gt;Number('5')&lt;/code&gt; if you're still new to the 'Unary Plus Operator' as it's more descriptive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-033&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hey... wouldn't it be awesome if there was some sort of site that would all you to work out the performance between using the &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt; methods and anything JavaScript related for that matter... Head on over to &lt;a href=&quot;/Day-034&quot;&gt;Day-34&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 032 - String Operators</title>
		<link href="http://365daysofjquery.github.com/Day-032"/>
		<updated>2013-02-01T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-032</id>
		<content type="html">&lt;p&gt;As well as the &lt;a href=&quot;/Day-024&quot;&gt;Arithmetic Operator&lt;/a&gt; '+' it's also possible to use as a string operator to concatenate strings together.&lt;/p&gt;

&lt;p&gt;Inspecting the code for various demos, you'll see code such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'true &amp;amp;&amp;amp; true' + ' = ' + and1 + '&amp;lt;br/&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this instance, the result concatenates the strings, so everything wrapped in &lt;code&gt;''&lt;/code&gt; will be output, notice that &lt;code&gt;and1&lt;/code&gt; isn't wrapped in &lt;code&gt;''&lt;/code&gt; therefore it's not a string, in this case it will return the value of the variable.&lt;/p&gt;

&lt;p&gt;Inspect this &lt;a href=&quot;/Demo-031&quot;&gt;demo&lt;/a&gt; for &lt;a href=&quot;/Day-031&quot;&gt;Day-031&lt;/a&gt; for a closer look.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 031 - Comparison Operators</title>
		<link href="http://365daysofjquery.github.com/Demo-031"/>
		<updated>2013-01-31T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-031</id>
		<content type="html">&lt;p&gt;'Logical AND' &amp;amp;&amp;amp;&lt;/p&gt;
&lt;p&gt;'Logical OR' ||&lt;/p&gt;
&lt;p&gt;'Logical NOT' !&lt;/p&gt;

&lt;div class=&quot;results&quot;&gt;&lt;/div&gt;

&lt;script&gt;

	var and1	= true &amp;&amp; true;		// true
	var and2	= true &amp;&amp; false;	// false
	var and3	= false &amp;&amp; true;	// false
	var and4	= false &amp;&amp; false;	// false
	var and5	= 1 &amp;&amp; 1;	// 1
	var and6	= 1 &amp;&amp; 2;	// 2
	var and7	= 2 &amp;&amp; 1;	// 1
	var and8	= 2 &amp;&amp; 2;	// 2

	var or1	= true || true;		// true
	var or2	= true || false;	// true
	var or3	= false || true;	// true
	var or4	= false || false;	// false
	var or5	= 1 || 1;	// 1
	var or6	= 1 || 2;	// 1
	var or7	= 2 || 1;	// 2
	var or8	= 2 || 2;	// 2

	var not1	= !true;	// false
	var not2	= !false;	// true
	var not3	= !1;		// false
	var not4	= !2;		// false

	$('.results').html(

		'true &amp;&amp; true' + ' = ' + and1 + '&lt;br/&gt;' +
		'true &amp;&amp; false' + ' = ' + and2 + '&lt;br/&gt;' +
		'false &amp;&amp; true' + ' = ' + and3 + '&lt;br/&gt;' +
		'false &amp;&amp; false' + ' = ' + and4 + '&lt;br/&gt;' +
		'1 &amp;&amp; 1' + ' = ' + and5 + '&lt;br/&gt;' +
		'1 &amp;&amp; 2' + ' = ' + and6 + '&lt;br/&gt;' +
		'2 &amp;&amp; 1' + ' = ' + and7 + '&lt;br/&gt;' +
		'2 &amp;&amp; 2' + ' = ' + and8 + '&lt;br/&gt;' +

		'true || true' + ' = ' + or1 + '&lt;br/&gt;' +
		'true || false' + ' = ' + or2 + '&lt;br/&gt;' +
		'false || true' + ' = ' + or3 + '&lt;br/&gt;' +
		'false || false' + ' = ' + or4 + '&lt;br/&gt;' +
		'1 || 1' + ' = ' + or5 + '&lt;br/&gt;' +
		'1 || 2' + ' = ' + or6 + '&lt;br/&gt;' +
		'2 || 1' + ' = ' + or7 + '&lt;br/&gt;' +
		'2 || 2' + ' = ' + or8 + '&lt;br/&gt;' +

		'!true' + ' = ' + not1 + '&lt;br/&gt;' +
		'!false' + ' = ' + not2 + '&lt;br/&gt;' +
		'!1' + ' = ' + not3 + '&lt;br/&gt;' +
		'!2' + ' = ' + not4

	)

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 031 - Logical Operators</title>
		<link href="http://365daysofjquery.github.com/Day-031"/>
		<updated>2013-01-31T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-031</id>
		<content type="html">&lt;p&gt;Logical Operators can be used with &lt;a href=&quot;/Day-029&quot;&gt;'boolean values'&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here they are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'Logical AND' &amp;amp;&amp;amp;

'Logical OR' ||

'Logical NOT' !
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out some examples in the &lt;a href=&quot;/Demo-031&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 030 - Operand, Operator and Operation</title>
		<link href="http://365daysofjquery.github.com/Day-030"/>
		<updated>2013-01-30T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-030</id>
		<content type="html">&lt;p&gt;Here's a simple arithmetic expression:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 + 3 = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this instance &lt;code&gt;2&lt;/code&gt; is one of the inputs (quantities), this is an &lt;code&gt;operand&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; is an addition &lt;code&gt;operator&lt;/code&gt;, followed by another &lt;code&gt;operand&lt;/code&gt; 3.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;operand&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt; and final &lt;code&gt;operand&lt;/code&gt; make up an &lt;code&gt;operation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The result, also known as sum or value of the &lt;code&gt;operation&lt;/code&gt; is 5.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 029 - Boolean</title>
		<link href="http://365daysofjquery.github.com/Day-029"/>
		<updated>2013-01-29T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-029</id>
		<content type="html">&lt;p&gt;Simply put a &lt;code&gt;boolean&lt;/code&gt; returns either a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;You'll find it very handy if you want to action code dependent on whether a value is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example if you had a site where users could log in, you could write some conditional code to check if the user was logged in.&lt;/p&gt;

&lt;p&gt;If the statement came back &lt;code&gt;true&lt;/code&gt; you could display their name, if it came back &lt;code&gt;false&lt;/code&gt;, you could prompt them to log in or sign up.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 028 - Comparison Operators</title>
		<link href="http://365daysofjquery.github.com/Demo-028"/>
		<updated>2013-01-28T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-028</id>
		<content type="html">&lt;p&gt;'Equal' ==&lt;/p&gt;
&lt;p&gt;'Not Equal' !=&lt;/p&gt;
&lt;p&gt;'Strict Equal' ===&lt;/p&gt;
&lt;p&gt;'Strict Not Equal' !==&lt;/p&gt;
&lt;p&gt;'Greater Than' &amp;gt;&lt;/p&gt;
&lt;p&gt;'Greater Than or Equal' &amp;gt;=&lt;/p&gt;
&lt;p&gt;'Less Than' &amp;lt;&lt;/p&gt;
&lt;p&gt;'Less Than or Equal' &amp;lt;=&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;

&lt;script&gt;

	var oneNumber	= 1 == 1;		// true
	var oneString	= 1 == '1';		// true

	var twoNumber	= 1 != 1;		// false
	var twoString	= 1 != '1';		// false

	var threeNumber	= 1 === 1;		// true
	var threeString	= 1 === '1';	// true

	var fourNumber	= 1 !== 1;		// false
	var fourString	= 1 !== '1';	// false

	var fiveNumber	= 1 &lt; 1;		// false
	var fiveString	= 1 &lt; '1';		// false

	var sixNumber	= 1 &lt;= 1;		// true
	var sixString	= 1 &lt;= '1';		// true

	var sevenNumber	= 1 &gt; 1;		// false
	var sevenString	= 1 &gt; '1';		// false

	var eightNumber	= 1 &gt;= 1;		// true
	var eightString	= 1 &gt;= '1';		// true

	$('span').html(

		'1 == 1' + ' ' + oneNumber + '&lt;br/&gt;' +
		'1 == \'1\'' + ' ' + oneString + '&lt;br/&gt;' +

		'1 != 1' + ' ' + twoNumber + '&lt;br/&gt;' +
		'1 != \'1\'' + ' ' + twoString + '&lt;br/&gt;' +

		'1 === 1' + ' ' + threeNumber + '&lt;br/&gt;' +
		'1 === \'1\'' + ' ' + threeString + '&lt;br/&gt;' +

		'1 !== 1' + ' ' + fourNumber + '&lt;br/&gt;' +
		'1 !== \'1\'' + ' ' + fourString + '&lt;br/&gt;' +

		'1 &lt; 1' + ' ' + fiveNumber + '&lt;br/&gt;' +
		'1 &lt; \'1\'' + ' ' + fiveString + '&lt;br/&gt;' +

		'1 &lt;= 1' + ' ' + sixNumber + '&lt;br/&gt;' +
		'1 &lt;= \'1\'' + ' ' + sixString + '&lt;br/&gt;' +

		'1 &gt; 1' + ' ' + sevenNumber + '&lt;br/&gt;' +
		'1 &gt; \'1\'' + ' ' + sevenString + '&lt;br/&gt;' +

		'1 &gt;= 1' + ' ' + eightNumber + '&lt;br/&gt;' +
		'1 &gt;= \'1\'' + ' ' + eightString

	)

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 028 - Comparison Operators</title>
		<link href="http://365daysofjquery.github.com/Day-028"/>
		<updated>2013-01-28T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-028</id>
		<content type="html">&lt;p&gt;As well as &lt;a href=&quot;/Day-024&quot;&gt;'Arithmetic Operators'&lt;/a&gt;, there's 'Comparison Operators'.&lt;/p&gt;

&lt;p&gt;As the name suggests, these are used to make comparisons.&lt;/p&gt;

&lt;p&gt;Here's some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'Equal' ==

'Not Equal' !=

'Strict Equal' ===

'Strict Not Equal' !==

'Greater Than' &amp;gt;

'Greater Than or Equal' &amp;gt;=

'Less Than' &amp;lt;

'Less Than or Equal' &amp;lt;=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;a href=&quot;/Demo-028&quot;&gt;demo&lt;/a&gt; shows them in action.&lt;/p&gt;

&lt;p&gt;Pay careful attention to the difference between using 'Strict'.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 == '1' true
1 === '1' false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;==&lt;/code&gt; using a number and a string will return &lt;code&gt;true&lt;/code&gt; whilst using &lt;code&gt;===&lt;/code&gt; will return false.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 027 - Numbers and Strings</title>
		<link href="http://365daysofjquery.github.com/Demo-027"/>
		<updated>2013-01-27T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-027</id>
		<content type="html">&lt;h2&gt;Concatenate&lt;/h2&gt;
&lt;p class=&quot;concatenate&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Addition&lt;/h2&gt;
&lt;p class=&quot;addition&quot;&gt;&lt;/p&gt;

&lt;script&gt;

	var a = '10';
	var b = 10;

	$('p.concatenate').text(a + b);

	$('p.addition').text(Number(a) + b);

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 027 - Numbers and Strings</title>
		<link href="http://365daysofjquery.github.com/Day-027"/>
		<updated>2013-01-27T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-027</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-021&quot;&gt;Day 021&lt;/a&gt;, we used the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li').eq(3).css('color', 'green');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the &lt;a href=&quot;/Demo-025&quot;&gt;demo for Day 025&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log('14 % 5 = ' + 14 % 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice what's going on with &lt;code&gt;'&lt;/code&gt;. Wrapping a number in &lt;code&gt;'&lt;/code&gt; will convert it to a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Have look a at this &lt;a href=&quot;/Demo-027&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = '10';
var b = 10;

$('p.concatenate').text(a + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you're setting two variables:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b&lt;/code&gt; as a &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then calling jQuery, searching the DOM for a &lt;code&gt;p&lt;/code&gt; tag, with a class of &lt;code&gt;Number&lt;/code&gt; and applying some text which is the value of &lt;code&gt;a + b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this instance as &lt;code&gt;a&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; a &lt;code&gt;Number&lt;/code&gt;, rather than the expected 10 + 10 value being added together to give us &lt;code&gt;20&lt;/code&gt; it will concatenate the values together to give us &lt;code&gt;1010&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, what if you did want to add these values rather than concatenating them? It's possible to convert the &lt;code&gt;string&lt;/code&gt; to a &lt;code&gt;Number&lt;/code&gt; by adding &lt;code&gt;Number&lt;/code&gt; and wrapping the variable in &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('p.addition').text(Number(a) + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call jQuery, search for a &lt;code&gt;p&lt;/code&gt; tag with a class of &lt;code&gt;addition&lt;/code&gt; add the text of the value of the variable &lt;code&gt;a&lt;/code&gt; as a &lt;code&gt;Number&lt;/code&gt;, now add that to the value of the variable &lt;code&gt;b&lt;/code&gt; giving you &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hey presto!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 026 - Arithmetic Operators (Part 3)</title>
		<link href="http://365daysofjquery.github.com/Demo-026"/>
		<updated>2013-01-26T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-026</id>
		<content type="html">&lt;div class=&quot;maths&quot;&gt;&lt;/div&gt;

&lt;script&gt;

	var i = 10;

		a = ++i;
		b = i++;
		c = --i;
		d = i--;

	console.log(a,b,c,d,i);

	$('.maths').html('&lt;p&gt; a = ' + a + ', b = ' + b + ', c = ' + c + ', d = ' + d + ', i = ' + i + '&lt;/p&gt;');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 026 - Arithmetic Operators (Part 3)</title>
		<link href="http://365daysofjquery.github.com/Day-026"/>
		<updated>2013-01-26T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-026</id>
		<content type="html">&lt;p&gt;You can also increment and decrement values.&lt;/p&gt;

&lt;p&gt;You can use either of these as a prefix or postfix operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i = 10;

var a = ++i;
var b = i++;
var c = --i;
var d = i--;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Increment prefix:   &lt;code&gt;a&lt;/code&gt; would be equal to &lt;code&gt;11&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;11&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Increment postfix:  &lt;code&gt;b&lt;/code&gt; would be equal to &lt;code&gt;11&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;12&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Decrement prefix:   &lt;code&gt;c&lt;/code&gt; would be equal to &lt;code&gt;9&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Decrement postfix:  &lt;code&gt;d&lt;/code&gt; would be equal to &lt;code&gt;9&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; equal to &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-026&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 025 - Arithmetic Operators (Part 2)</title>
		<link href="http://365daysofjquery.github.com/Demo-025"/>
		<updated>2013-01-25T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-025</id>
		<content type="html">&lt;p&gt;14 % 5 = &lt;span class=&quot;modulusOne&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;20 % 5 = &lt;span class=&quot;modulusTwo&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;200 % 5 = &lt;span class=&quot;modulusThree&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script&gt;

	var modulusOne = 14 % 5;
	console.log('14 % 5 = ' + 14 % 5);
	$('span.modulusOne').text(modulusOne);

	var modulusTwo = 20 % 5;
	console.log('20 % 5 = ' + 20 % 5);
	$('span.modulusTwo').text(modulusTwo);

	var modulusThree = 200 % 5;
	console.log('200 % 5 = ' + 200 % 5);
	$('span.modulusThree').text(modulusThree);

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 025 - Arithmetic Operators (Part 2)</title>
		<link href="http://365daysofjquery.github.com/Day-025"/>
		<updated>2013-01-25T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-025</id>
		<content type="html">&lt;p&gt;As well as standard addition, subtraction, multiplication and division, there's also a few others that are a bit more complicated.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%&lt;/code&gt; known as 'modulus', will return the value remainder as an integer of the diving two operands.&lt;/p&gt;

&lt;p&gt;Eh!? You what?&lt;/p&gt;

&lt;p&gt;Yeah :p&lt;/p&gt;

&lt;p&gt;Let's look at a few examples, it's actually a lot easier than it sounds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;14 % 5 = 4
20 % 5 = 0
200 % 5 = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5, goes into 10 two times, with a remainder of 4.&lt;/p&gt;

&lt;p&gt;5, goes into 20 four times, with a remainder of 0.&lt;/p&gt;

&lt;p&gt;5, goes into 200 forty times, with a remainder of 0.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href=&quot;/Demo-025&quot;&gt;demo&lt;/a&gt; for more examples.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 024 - Arithmetic Operators</title>
		<link href="http://365daysofjquery.github.com/Demo-024"/>
		<updated>2013-01-24T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-024</id>
		<content type="html">&lt;p&gt;5 + 5 = &lt;span class=&quot;addition&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;5 - 5 = &lt;span class=&quot;subtraction&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;5 * 5 = &lt;span class=&quot;multiplication&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;5 / 5 = &lt;span class=&quot;division&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script&gt;

	var addition = 5 + 5;
	$('span.addition').text(addition);

	var subtraction = 5 - 5;
	$('span.subtraction').text(subtraction);

	var multiplication = 5 * 5;
	$('span.multiplication').text(multiplication);

	var division = 5 / 5;
	$('span.division').text(division);

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 024 - Arithmetic Operators</title>
		<link href="http://365daysofjquery.github.com/Day-024"/>
		<updated>2013-01-24T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-024</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-021&quot;&gt;Day 021&lt;/a&gt;, you used an &lt;code&gt;integer&lt;/code&gt; to select a specific &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With an &lt;code&gt;integer&lt;/code&gt; it's possible to use 'Arithmetic Operators'.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var addition = 5 + 5;
$('span.addition').text(addition);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, you set a &lt;code&gt;variable&lt;/code&gt; (I'll cover this in more depth in a further day).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;variable&lt;/code&gt; will be equal to the result of the 5 + 5. You then call jQuery, look for a &lt;code&gt;.span&lt;/code&gt; element in the DOM with a class of &lt;code&gt;addition&lt;/code&gt;. Then use the &lt;code&gt;.text&lt;/code&gt; method to add the variable answer to that element.&lt;/p&gt;

&lt;p&gt;Similarly it's possible to do subtraction, multiplication and division.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href=&quot;/Demo-024&quot;&gt;demo&lt;/a&gt; for more examples.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 023 - Next and Previous</title>
		<link href="http://365daysofjquery.github.com/Demo-023"/>
		<updated>2013-01-23T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-023</id>
		<content type="html">&lt;ul class=&quot;one&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;ul class=&quot;two&quot;&gt;
		&lt;li&gt;One&lt;/li&gt;
		&lt;li&gt;Two&lt;/li&gt;
		&lt;li&gt;Three&lt;/li&gt;
		&lt;li&gt;Four&lt;/li&gt;
		&lt;li&gt;Five&lt;/li&gt;
	&lt;/ul&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul li:first-child').next().css('color', 'crimson');

	$('ul li:last-child').prev().css('color', 'blue');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 023 - Next and Previous</title>
		<link href="http://365daysofjquery.github.com/Day-023"/>
		<updated>2013-01-23T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-023</id>
		<content type="html">&lt;p&gt;Here you'll learn how it's possible to use &lt;code&gt;.next&lt;/code&gt; and &lt;code&gt;.prev&lt;/code&gt; to select elements.&lt;/p&gt;

&lt;p&gt;Take the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li:first-child').next().css('color', 'crimson');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you look for the first &lt;code&gt;li&lt;/code&gt; element then using the &lt;code&gt;.next&lt;/code&gt; method, select the next element.&lt;/p&gt;

&lt;p&gt;Similarly, it's possible to use &lt;code&gt;.prev&lt;/code&gt; to select the previous element.&lt;/p&gt;

&lt;p&gt;Take a look at this &lt;a href=&quot;/Demo-023&quot;&gt;demo&lt;/a&gt; and inspect the elements for a closer look.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 022 - Selecting with CSS</title>
		<link href="http://365daysofjquery.github.com/Demo-022"/>
		<updated>2013-01-22T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-022</id>
		<content type="html">&lt;ul class=&quot;one&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;ul class=&quot;two&quot;&gt;
		&lt;li&gt;One&lt;/li&gt;
		&lt;li&gt;Two&lt;/li&gt;
		&lt;li&gt;Three&lt;/li&gt;
		&lt;li&gt;Four&lt;/li&gt;
		&lt;li&gt;Five&lt;/li&gt;
	&lt;/ul&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul li:first-child').css('color', 'crimson');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 022 - Selecting with CSS</title>
		<link href="http://365daysofjquery.github.com/Day-022"/>
		<updated>2013-01-22T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-022</id>
		<content type="html">&lt;p&gt;This example shows how you can take advantage of using CSS3 selectors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li:first-child').css('color', 'crimson');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although it's possible to do this in JavaScript using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li:first').css('color', 'crimson');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will be slower, however it will also work in older browsers such as IE6 if this is a requirement.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-022&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 021 - Ground Zero</title>
		<link href="http://365daysofjquery.github.com/Demo-021"/>
		<updated>2013-01-21T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-021</id>
		<content type="html">&lt;ul&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul li').eq(0).css('color', 'red');
	$('ul li').eq(3).css('color', 'green');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 021 - Ground Zero</title>
		<link href="http://365daysofjquery.github.com/Day-021"/>
		<updated>2013-01-21T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-021</id>
		<content type="html">&lt;p&gt;JavaScript is a 'zero based language'.&lt;/p&gt;

&lt;p&gt;This means that if you have 5 elements, JavaScript counts them as 0, 1, 2, 3, 4.&lt;/p&gt;

&lt;p&gt;So, if you wanted to select the first &lt;code&gt;li&lt;/code&gt; in a &lt;code&gt;ul&lt;/code&gt; you could do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li').eq(0).css('color', 'red');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will search for the first &lt;code&gt;li&lt;/code&gt; and apply a CSS colour value of red.&lt;/p&gt;

&lt;p&gt;To select 'four' you'd do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul li').eq(3).css('color', 'green');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice here, you don't wrap the number in &lt;code&gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is something that can take a while to get to grips with. In this instance the number added to the &lt;code&gt;.eq&lt;/code&gt; method is an &lt;code&gt;integer&lt;/code&gt;. Rather than passing a &lt;code&gt;selector&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt; that jQuery can search the DOM for, here the &lt;code&gt;.eq&lt;/code&gt; method requires an integer as a 'plain Number type'. More about &lt;a href=&quot;/Day-027&quot;&gt;numbers and strings in Day 027&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-021&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 020 - Find</title>
		<link href="http://365daysofjquery.github.com/Demo-020"/>
		<updated>2013-01-20T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-020</id>
		<content type="html">&lt;h2&gt;Children&lt;/h2&gt;

&lt;ul class=&quot;one&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;ul class=&quot;two&quot;&gt;
		&lt;li&gt;One&lt;/li&gt;
		&lt;li&gt;Two&lt;/li&gt;
		&lt;li&gt;Three&lt;/li&gt;
		&lt;li&gt;Four&lt;/li&gt;
		&lt;li&gt;Five&lt;/li&gt;
	&lt;/ul&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Find&lt;/h2&gt;

&lt;ul class=&quot;three&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;ul class=&quot;four&quot;&gt;
		&lt;li&gt;One&lt;/li&gt;
		&lt;li&gt;Two&lt;/li&gt;
		&lt;li&gt;Three&lt;/li&gt;
		&lt;li&gt;Four&lt;/li&gt;
		&lt;li&gt;Five&lt;/li&gt;
	&lt;/ul&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul.one').children('li').css('color', 'blue');
	$('ul.three').find('li').css('color', 'fuchsia');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 020 - Find</title>
		<link href="http://365daysofjquery.github.com/Day-020"/>
		<updated>2013-01-20T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-020</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-018&quot;&gt;Day 018&lt;/a&gt;, you looked at how to select children, but what if you wanted to select all specific elements?&lt;/p&gt;

&lt;p&gt;In this instance the &lt;code&gt;.find&lt;/code&gt; method comes in handy.&lt;/p&gt;

&lt;p&gt;Take this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul.three').find('li').css('color', 'fuchsia');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, you'll call jQuery, search for a &lt;code&gt;ul&lt;/code&gt; with a class of &lt;code&gt;three&lt;/code&gt;, then find all the &lt;code&gt;li&lt;/code&gt; elements and apply a CSS colour value.&lt;/p&gt;

&lt;p&gt;If you take a look at this &lt;a href=&quot;/Demo-020&quot;&gt;demo&lt;/a&gt;.
Using the &lt;code&gt;children&lt;/code&gt; method, CSS only gets applied to the children.
Using &lt;code&gt;find&lt;/code&gt;, the CSS gets applied to all the &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hoorar!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 019 - jQuery 1.9</title>
		<link href="http://365daysofjquery.github.com/Day-019"/>
		<updated>2013-01-19T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-019</id>
		<content type="html">&lt;p&gt;Hold the page! &lt;a href=&quot;http://code.jquery.com/jquery-1.9.0.js&quot;&gt;jQuery 1.9.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;h2&gt;What Does This Mean?&lt;/h2&gt;

&lt;p&gt;It means lots of awesome people have done lots of awesome work and made jQuery even more awesome.&lt;/p&gt;

&lt;h2&gt;Should I Upgrade?&lt;/h2&gt;

&lt;p&gt;Yup! But be careful!&lt;/p&gt;

&lt;h2&gt;Why Should I Be Careful?&lt;/h2&gt;

&lt;p&gt;Check out the upgrade guide on the jQuery site &lt;a href=&quot;http://jquery.com/upgrade-guide/1.9/#changes-of-note-in-jquery-1-9&quot;&gt;http://jquery.com/upgrade-guide/1.9/#changes-of-note-in-jquery-1-9&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're a beginner don't worry too much if none of that seems to make sense. We'll go over it in later days.&lt;/p&gt;

&lt;p&gt;There's been quite a few significant changes in this release and it's important to note that certain things have been deprecated. This means upgrading could potentially break you previous code.&lt;/p&gt;

&lt;p&gt;As well as the upgrade to jQuery itself, there's also a 'jQuery Migrate' project &lt;a href=&quot;https://github.com/jquery/jquery-migrate&quot;&gt;https://github.com/jquery/jquery-migrate&lt;/a&gt;. The project is great for testing.&lt;/p&gt;

&lt;p&gt;&quot;This project can be used to detect and restore APIs, features or functionality that have been deprecated in jQuery and removed as of version 1.9.&quot; - taken from &lt;a href=&quot;https://github.com/jquery/jquery-migrate&quot;&gt;https://github.com/jquery/jquery-migrate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you now test over your code and keep an eye on your console logs any code that has been deprecated will be logged. You can then reevaluate your code and change accordingly to be fully jQuery 1.9.0 compatible.&lt;/p&gt;

&lt;p&gt;Of course after you've done this, I'd always recommend checking over everything again locally before pushing live.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 018 - Children</title>
		<link href="http://365daysofjquery.github.com/Demo-018"/>
		<updated>2013-01-18T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-018</id>
		<content type="html">&lt;ul class=&quot;one&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;ul class=&quot;two&quot;&gt;
	&lt;li&gt;One&lt;/li&gt;
	&lt;li&gt;Two&lt;/li&gt;
	&lt;li&gt;Three&lt;/li&gt;
	&lt;li&gt;Four&lt;/li&gt;
	&lt;li&gt;Five&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;

	$('ul.one').children('li').css('color', 'blue');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 018 - Children</title>
		<link href="http://365daysofjquery.github.com/Day-018"/>
		<updated>2013-01-18T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-018</id>
		<content type="html">&lt;p&gt;In previous days you've added some text to a h1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here is some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You've also added HTML content to the body.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('body').html('&amp;lt;h1&amp;gt;Here Is Some HTML&amp;lt;/h1&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is great, but what if things are a little more complicated? You've got two &lt;code&gt;ul&lt;/code&gt;, but you only want to manipulate one of the lists.&lt;/p&gt;

&lt;p&gt;Take a look at this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('ul.one').children('li').css('color', 'blue');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will search for a &lt;code&gt;ul&lt;/code&gt; which has a class of &lt;code&gt;one&lt;/code&gt;, then any &lt;code&gt;li&lt;/code&gt; that are direct children, will have the CSS value changed to blue.&lt;/p&gt;

&lt;p&gt;For a closer look, you can open up this &lt;a href=&quot;/Demo-018&quot;&gt;demo&lt;/a&gt; and inspect the code.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 017 - Adding HTML</title>
		<link href="http://365daysofjquery.github.com/Demo-017"/>
		<updated>2013-01-17T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-017</id>
		<content type="html">&lt;div class=&quot;html-code&quot;&gt;&lt;/div&gt;

&lt;script&gt;

	$('.html-code').html('&lt;h1&gt;Here Is Some HTML&lt;/h1&gt;');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 017 - Adding HTML</title>
		<link href="http://365daysofjquery.github.com/Day-017"/>
		<updated>2013-01-17T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-017</id>
		<content type="html">&lt;p&gt;Much the same as adding text in jQuery you can also add HTML like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('body').html('&amp;lt;h1&amp;gt;Here Is Some HTML&amp;lt;/h1&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly when using &lt;code&gt;'&lt;/code&gt; you'll need to add a &lt;code&gt;\&lt;/code&gt; before it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('body').html('&amp;lt;h1&amp;gt;Here\'s Some HTML&amp;lt;h1&amp;gt;');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-017&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 016 - Adding Text - Apostrophe</title>
		<link href="http://365daysofjquery.github.com/Demo-016"/>
		<updated>2013-01-16T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-016</id>
		<content type="html">&lt;h2&gt;&lt;/h2&gt;

&lt;script&gt;

	$('h2').text('here\'s some text');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 016 - Adding Text - Apostrophe</title>
		<link href="http://365daysofjquery.github.com/Day-016"/>
		<updated>2013-01-16T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-016</id>
		<content type="html">&lt;p&gt;Notice in the &lt;a href=&quot;/Day-015&quot;&gt;previous day&lt;/a&gt; we wrapped the text we wanted to display in &lt;code&gt;'&lt;/code&gt;, but what if you need to use &lt;code&gt;'&lt;/code&gt; to be displayed in your text?&lt;/p&gt;

&lt;p&gt;This code won't work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here's some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the jQuery will look for the first &lt;code&gt;'&lt;/code&gt; to start and &lt;code&gt;'&lt;/code&gt; to end, viewing this code in the console you'll get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uncaught SyntaxError: Unexpected identifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To rectify this and display the &lt;code&gt;'&lt;/code&gt; as text you can add &lt;code&gt;\&lt;/code&gt; before like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here\'s some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-016&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 015 - Adding Text</title>
		<link href="http://365daysofjquery.github.com/Demo-015"/>
		<updated>2013-01-15T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-015</id>
		<content type="html">&lt;h2&gt;&lt;/h2&gt;

&lt;script&gt;

	$('h2').text('here is some text');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 015 - Adding Text</title>
		<link href="http://365daysofjquery.github.com/Day-015"/>
		<updated>2013-01-15T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-015</id>
		<content type="html">&lt;p&gt;Most of the time text will come from HTML content, but on some occassions you might find it handy to write something in jQuery.&lt;/p&gt;

&lt;p&gt;Here, we call jQuery, search for a h1 tag and add some text into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here is some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/Demo-015&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 014 - camelCase</title>
		<link href="http://365daysofjquery.github.com/Day-014"/>
		<updated>2013-01-14T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-014</id>
		<content type="html">&lt;p&gt;&lt;code&gt;camelCase&lt;/code&gt; is a consistent naming convention used throughout jQuery.&lt;/p&gt;

&lt;p&gt;Starting with a lowercase letter and adding a capital to each word thereafter makes things a lot easier to read.&lt;/p&gt;

&lt;p&gt;Here's some examples without camel case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getsetattribute&lt;/li&gt;
&lt;li&gt;inlineblockneedslayout&lt;/li&gt;
&lt;li&gt;shrinkwrapblocks&lt;/li&gt;
&lt;li&gt;setattributenode&lt;/li&gt;
&lt;li&gt;scrollleft&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now again with camel case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getSetAttribute&lt;/li&gt;
&lt;li&gt;inlineBlockNeedsLayout&lt;/li&gt;
&lt;li&gt;shrinkWrapBlocks&lt;/li&gt;
&lt;li&gt;setAttributeNode&lt;/li&gt;
&lt;li&gt;scrollLeft&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Much easier to read :D&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 013 - Adding a Class</title>
		<link href="http://365daysofjquery.github.com/Demo-013"/>
		<updated>2013-01-13T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-013</id>
		<content type="html">&lt;style type=&quot;text/css&quot;&gt;

	h2 {
		background: yellow;
		border: 5px solid orange;
		color: red;
		font-size: 30px;
		padding: 10px;
		margin: 10px;
	}

&lt;/style&gt;

&lt;h2&gt;
	Here's some text in a h2 tag
&lt;/h2&gt;

&lt;h3&gt;
	Here's some text in a h3 tag
&lt;/h3&gt;

&lt;script&gt;

	$('h2').addClass('this-is-a-h2');

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 013 - Adding a Class</title>
		<link href="http://365daysofjquery.github.com/Day-013"/>
		<updated>2013-01-13T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-013</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-012&quot;&gt;Day 012&lt;/a&gt; you looked at how to manipulate CSS using jQuery, although it's possible to do, it's not always the best way to go about things.&lt;/p&gt;

&lt;p&gt;So let's look at how we can add a class to an element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').addClass('this-is-a-h1');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the code, again calls jQuery, it then looks for a &lt;code&gt;h1&lt;/code&gt;, then tells jQuery you'd like to add a class and lastly tells jQuery what you'd like that class to be called, in this case &lt;code&gt;this-is-a-h1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Viewing the &lt;a href=&quot;/Demo-013&quot;&gt;demo&lt;/a&gt; and inspecting the h1, you'll see that although there's no class on the h1 in the original source code, jQuery adds the class name.&lt;/p&gt;

&lt;p&gt;You can now keep apply all the required styles in CSS by referencing the class name.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 012 - Manipulating CSS</title>
		<link href="http://365daysofjquery.github.com/Demo-012"/>
		<updated>2013-01-12T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-012</id>
		<content type="html">&lt;style type=&quot;text/css&quot;&gt;

	.manipulating-css div {
		margin: 0 0 20px;
	}

&lt;/style&gt;

&lt;div class=&quot;manipulating-css&quot;&gt;

	&lt;div class=&quot;red&quot;&gt;
		This text is red.
	&lt;/div&gt;

	&lt;div class=&quot;blue&quot;&gt;
		This text is blue.
	&lt;/div&gt;

	&lt;div class=&quot;small-text&quot;&gt;
		This text has a font-size of 11px.
	&lt;/div&gt;

	&lt;div class=&quot;big-text&quot;&gt;
		This text has a font-size of 30px.
	&lt;/div&gt;

	&lt;div class=&quot;red-big-text&quot;&gt;
		This text is red and has a font-size of 30px.
	&lt;/div&gt;

	&lt;div class=&quot;blue-big-text-margin&quot;&gt;
		This text is blue, has a font-size of 30px and a margin of 10px.
	&lt;/div&gt;

&lt;/div&gt;

&lt;script&gt;

	$('div.red').css('color', 'red');
	$('div.blue').css('color', 'blue');

	$('div.small-text').css('font-size', '11px');
	$('div.big-text').css('font-size', '30px');

	$('div.red-big-text').css({
		'color': 'red',
		'font-size': 30
	});

	$('div.blue-big-text-margin').css({
		'color': 'blue',
		'font-size': 30,
		'margin': 10
	});

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 012 - Manipulating CSS</title>
		<link href="http://365daysofjquery.github.com/Day-012"/>
		<updated>2013-01-12T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-012</id>
		<content type="html">&lt;p&gt;Ok, coding time!&lt;/p&gt;

&lt;p&gt;Here you'll take some text in divs and learn how to manipulate these via CSS. Although it's possible to do this, sometimes it can be better to add or change a class name, we'll look at this in &lt;a href=&quot;/Day-013&quot;&gt;Day 013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But for now take a look at this &lt;a href=&quot;/Demo-012&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red').css('color', 'red');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you could also do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('.red').css('color', 'red');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this is less code, so may seem like a good idea, performance can be improved upon by being more specific when it comes to telling jQuery what it's looking for. I'll cover this in more detail going forward, but for now let's break down the code above.&lt;/p&gt;

&lt;p&gt;First the &lt;code&gt;$&lt;/code&gt; calls to jQuery, it then tells jQuery to look for a &lt;code&gt;div&lt;/code&gt; element with a &lt;code&gt;class&lt;/code&gt; of &lt;code&gt;red&lt;/code&gt;.
When it's found that, we want to do something with the CSS, then tell it what it needs to do to the CSS, in this case change the CSS property to red.&lt;/p&gt;

&lt;p&gt;But what if you want to change more than one property?&lt;/p&gt;

&lt;p&gt;Sure, you could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red').css('color', 'red');
$('div.red').css('font-size', '30');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But rather than telling jQuery to keep searching for the same element and writing more code, there's a better way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red-big-text').css({
    'color': 'red',
    'font-size': 30
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things important to note when declaring multiple properties;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The addition of &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;,&lt;/code&gt; goes to the end of the line and CSS property is split with &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No longer need to wrap numbered values in &lt;code&gt;''&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

</content>
	</entry>
	
	<entry>
		<title>Day 011 - Recap</title>
		<link href="http://365daysofjquery.github.com/Day-011"/>
		<updated>2013-01-11T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-011</id>
		<content type="html">&lt;p&gt;Right! You still with me?!&lt;/p&gt;

&lt;p&gt;Let's have a quick recap to remind yourself (myself) what you've done so far.&lt;/p&gt;

&lt;p&gt;So now, you should know how to download jQuery, how Google's CDN can help load jQuery, the difference between using &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;jQuery&lt;/code&gt;, how to avoid conflicts with other libraries and have some idea of tools that can help you out.&lt;/p&gt;

&lt;p&gt;Ok, so now you've covered the basics, now let's get stuck into some code in &lt;a href=&quot;/Day-012&quot;&gt;Day 012&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 010 - Tools - Libraries</title>
		<link href="http://365daysofjquery.github.com/Day-010"/>
		<updated>2013-01-10T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-010</id>
		<content type="html">&lt;p&gt;For accessibility it's important to note that people may have styles and, or JavaScript disabled, when writing any code you should always bear this in mind. Unfortunately not everyone in the world uses a modern browser taking advantage of all the great stuff that can be accomplished with HTML5 and CSS3, so depending on your project it's worth thinking about what browsers you're going to support.&lt;/p&gt;

&lt;h2&gt;Modernizr&lt;/h2&gt;

&lt;p&gt;Modernizr is a great JavaScript library that can help out with these issues by detecting features and adding classes to the &lt;code&gt;html&lt;/code&gt; element. Here's an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot; id=&quot;modernizrcom&quot; class=&quot;js no-touch postmessage history multiplebgs boxshadow opacity cssanimations csscolumns cssgradients csstransforms csstransitions fontface localstorage sessionstorage svg inlinesvg no-blobbuilder blob bloburls download formdata wf-proximanova1proximanova2-n4-active wf-proximanova1proximanova2-i4-active wf-proximanova1proximanova2-n7-active wf-proximanova1proximanova2-i7-active wf-proximanovacondensed1proximanovacondensed2-n6-active wf-athelas1athelas2-n4-active wf-active&quot;&amp;gt;&amp;lt;head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out how to get started with Modernizr and a full list of feature detections please visit &lt;a href=&quot;http://modernizr.com/&quot;&gt;http://modernizr.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Selectivizr&lt;/h2&gt;

&lt;p&gt;As mentioned previously not everyone uses a modern browser, Internet Explorer is a prime culprit that many users will have installed on their Windows PC and not be aware that it's possible to download another browser or upgrade and so keep on using it.&lt;/p&gt;

&lt;p&gt;Personally I'm not a fan of going back to support older browsers and adding extra code that will then have a negative impact on those using modern browsers. I opt to use the &lt;code&gt;chromeframe&lt;/code&gt; as seen in &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate/blob/master/index.html&quot;&gt;h5bp&lt;/a&gt;, where possible in order to help move the web forwards.&lt;/p&gt;

&lt;p&gt; &lt;code&gt;chromeframe&lt;/code&gt; adds a message to the top of the page for people using older browsers to go to &lt;a href=&quot;http://browsehappy.com/&quot;&gt;http://browsehappy.com/&lt;/a&gt; where they can upgrade to a modern browser.&lt;/p&gt;

&lt;p&gt;However, most of us have bills to pay and if we're working on a project where the client's requirement is to support older browsers selectivizr can help out by doing a great job at providing CSS3 selectors for Internet Explorer 6-8.&lt;/p&gt;

&lt;p&gt;To find out more visit &lt;a href=&quot;http://selectivizr.com/&quot;&gt;http://selectivizr.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Zepto&lt;/h2&gt;

&lt;p&gt;Zepto, Zepto, Zepto... Ok, this one's a bit different as in certain circumstances it can be used as a replacement for jQuery.&lt;/p&gt;

&lt;p&gt;Zepto is less than a quarter the size of jQuery in file size, it does this by focusing on only modern browsers. So if you've assessed your project's requirements and know that older browsers aren't an issue (looking at IE8 and below) you'll most likely find that you can switch to Zepto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zeptojs.com/&quot;&gt;http://zeptojs.com/&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 009 - Tools - Online</title>
		<link href="http://365daysofjquery.github.com/Day-009"/>
		<updated>2013-01-09T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-009</id>
		<content type="html">&lt;p&gt;When working on bigger projects that may contain hundreds or thousands of lines of code and you're working on something that's not quite working the way you want it, a great approach is to create a 'reduced test case'.&lt;/p&gt;

&lt;p&gt;Some awesome people have created the following sites that make it great to quickly create a reduced test case and even better, allow you to save, edit and share your code.&lt;/p&gt;

&lt;p&gt;They're also great for trying out new techniques and playing about with code that's new or you're not familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codepen.io/&quot;&gt;http://codepen.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cssdesk.com/&quot;&gt;http://cssdesk.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dabblet.com/&quot;&gt;http://dabblet.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsbin.com/&quot;&gt;http://jsbin.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/&quot;&gt;http://jsfiddle.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinkerbin.com/&quot;&gt;http://tinkerbin.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinker.io/&quot;&gt;http://tinker.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 008 - Tools - Workflow</title>
		<link href="http://365daysofjquery.github.com/Day-008"/>
		<updated>2013-01-08T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-008</id>
		<content type="html">&lt;p&gt;Whilst writing and viewing code you'll be using at least a browser and most likely a text editor.
You'll also need a way to open and navigate the files you're working on.&lt;/p&gt;

&lt;p&gt;Here's some tools you may find useful to help.&lt;/p&gt;

&lt;h2&gt;Quicksilver&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qsapp.com/&quot;&gt;http://qsapp.com/&lt;/a&gt; allows you to bring up a small popup and start typing to find things you most often use.&lt;/p&gt;

&lt;object width=&quot;420&quot; height=&quot;315&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/d0MvL_CkmnY?version=3&amp;amp;hl=en_US&amp;amp;rel=0&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/d0MvL_CkmnY?version=3&amp;amp;hl=en_US&amp;amp;rel=0&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;420&quot; height=&quot;315&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;h2&gt;Spectacle&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://spectacleapp.com/&quot;&gt;http://spectacleapp.com/&lt;/a&gt; is a real time saver, forget moving your mouse to the bottom of a window to re-size it. Setup some shortcuts and automate window re-sizing with shortcuts. Great for quickly moving your browser to the left and your text editor to the right of the screen. Here's the shortcuts I use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8515/8373621900_cd0ae36461_o.png&quot; alt=&quot;Spectacle Custom Shortcuts&quot;&gt;&lt;/p&gt;

&lt;h2&gt;LiveReload&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://livereload.com/&quot;&gt;http://livereload.com/&lt;/a&gt; again is a great time saver, when editing code in your text editor then saving, it will automatically reload your browser for you with the changes made.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Demo 007 - Tools - Reading</title>
		<link href="http://365daysofjquery.github.com/Demo-007"/>
		<updated>2013-01-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Demo-007</id>
		<content type="html">&lt;button&gt;Button&lt;/button&gt;

&lt;script&gt;

	$('button').click(function(){
		console.log('button is clicked');
	});

&lt;/script&gt;</content>
	</entry>
	
	<entry>
		<title>Day 007 - Tools - Reading</title>
		<link href="http://365daysofjquery.github.com/Day-007"/>
		<updated>2013-01-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-007</id>
		<content type="html">&lt;p&gt;Ok, so now you've gone over some of the basics, let's get a bit of code working.&lt;/p&gt;

&lt;p&gt;Copy the following code or view the &lt;a href=&quot;/Demo-007&quot;&gt;demo&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Console Log&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;button&amp;gt;Button&amp;lt;/button&amp;gt;

&amp;lt;!-- jQuery --&amp;gt;
&amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write('&amp;lt;script src=&quot;js/jquery-1.9.0.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;')&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;

    $('button').click(function(){
        console.log('button is clicked');
    });

&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste this code into a new file, save this somewhere and open in Google Chrome.
If you don't already have Google Chrome you can download it &lt;a href=&quot;http://www.google.com/chrome&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Google Chrome you want to view the &lt;code&gt;console&lt;/code&gt;. This can be found in Google Chrome's Developer Tools &lt;code&gt;View &amp;gt; Developer &amp;gt; Developer Tools&lt;/code&gt; or use the shortcut &lt;code&gt;alt + cmd + i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default the Elements tab is selected, select the &lt;code&gt;console&lt;/code&gt; tab. Now click the &lt;code&gt;button&lt;/code&gt; that's in the browser window, you should now see the text &lt;code&gt;button is clicked&lt;/code&gt; appear in the &lt;code&gt;console&lt;/code&gt;. Awesome. This will come in very handy in future posts to work out what jQuery is outputting.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;console&lt;/code&gt; and Google Chrome Dev Tools is where I spend a vast amount of time whilst developing, it's also possible to theme. I use &lt;a href=&quot;https://github.com/simonowendesign/SO-Dark-Monokai-v3&quot;&gt;https://github.com/simonowendesign/SO-Dark-Monokai-v3&lt;/a&gt;. Still needs some work, but it's getting there.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 006 - Tools - Writing</title>
		<link href="http://365daysofjquery.github.com/Day-006"/>
		<updated>2013-01-06T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-006</id>
		<content type="html">&lt;p&gt;Web development is getting increasingly more complicated as time goes on. Gone are the days of learning tables, then divs, then CSS properties as they are invented and introduced.&lt;/p&gt;

&lt;p&gt;Nowadays there's a &lt;code&gt;Fucking Shitload of Stuff&lt;/code&gt; (Yes, that is a technical term in case you were wondering) with a multitude of various platforms, browsers and devices to test on. Luckily there's some great tools out there to help out with your workflow.&lt;/p&gt;

&lt;p&gt;This topic could warrant its own site in itself, there's so much going on (If you're interested I've done a few &lt;a href=&quot;http://www.youtube.com/user/simonowendesign/videos&quot;&gt;screencasts&lt;/a&gt;), but for now let's concentrate on some JavaScript helpers.&lt;/p&gt;

&lt;p&gt;First thing you're going to want is a Text Editor, there's a few out there, I'd recommend &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;. Then you'll want to get &lt;a href=&quot;http://wbond.net/sublime_packages/package_control&quot;&gt;Package Control&lt;/a&gt;. Once you've installed this,  package installations are a piece of cake.&lt;/p&gt;

&lt;p&gt;Open up Sublime Text 2, then press &lt;code&gt;cmd + shift + p&lt;/code&gt;, you should see a new window open. You can then start typing and it will filter down, if you start typing &lt;code&gt;package&lt;/code&gt; you can see all the package options that are available, we're after &lt;code&gt;Package Control: Install Package&lt;/code&gt; when you have this selected hit &lt;code&gt;Enter&lt;/code&gt;. This will now go and grab all the latest packages and again you can start typing for the package you'd like to install and it will filter down.&lt;/p&gt;

&lt;p&gt;I find it handy to keep a gist of all the packages installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bracket Highlighter
CSScomb
Dotfiles Syntax Highlighting
FileDiffs
JsFormat
JSLint
Package Control
Prefixr
SFTP
Side Bar
Closure Linter (Google) https://developers.google.com/closure/utilities/
SublimeLinter
Tag

Emmet (previously ZenCoding)
EditorConfig

Theme - Phoenix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main 2 packages I'd recommend for JavaScript are;
&lt;code&gt;Bracket Highlighter&lt;/code&gt;, this is useful to see where code opens and closes.
&lt;code&gt;JSLint&lt;/code&gt;, this will output helpful improvements and help debugging.&lt;/p&gt;

&lt;p&gt;As well as packages it's also possible to change the theme, I use a custom theme &lt;a href=&quot;https://github.com/simonowendesign/Monokai-Phoenix&quot;&gt;https://github.com/simonowendesign/Monokai-Phoenix&lt;/a&gt; fusing the beauty of the Monokai theme together with Phoenix which I find does a great job on improving the UI for Sublime Text 2.&lt;/p&gt;

&lt;p&gt;When writing code you'll most likely find yourself using sections of code on a regular basis. This is where &lt;a href=&quot;http://sublimetext.info/docs/en/extensibility/snippets.html&quot;&gt;snippets&lt;/a&gt; come in handy, the snippet created in &lt;a href=&quot;/Day-005&quot;&gt;Day 005&lt;/a&gt; allows you to simply type &lt;code&gt;siaf&lt;/code&gt; which will then output the code to create a Self Invoking Anonymous Function.&lt;/p&gt;

&lt;p&gt;Here's another snippet that you'll find yourself using over and over again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Console Log Snippet for Sublime Text 2:

&amp;lt;snippet&amp;gt;
    &amp;lt;content&amp;gt;&amp;lt;![CDATA[console.log($1);$0]]&amp;gt;&amp;lt;/content&amp;gt;
    &amp;lt;tabTrigger&amp;gt;cl&amp;lt;/tabTrigger&amp;gt;
    &amp;lt;scope&amp;gt;source.js,source.js.embedded.html&amp;lt;/scope&amp;gt;
    &amp;lt;description&amp;gt;console.log()&amp;lt;/description&amp;gt;
&amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;cl&lt;/code&gt; creates code that allows you to &lt;code&gt;log&lt;/code&gt; to the &lt;code&gt;console&lt;/code&gt;. Not sure what the console is? You guessed it! Head on over to &lt;a href=&quot;/Day-007&quot;&gt;Day 007&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 005 - Let's get ready to jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-005"/>
		<updated>2013-01-05T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-005</id>
		<content type="html">&lt;p&gt;Let's head over to the H5BP &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate/blob/master/index.html&quot;&gt;index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice all the script tags are at the bottom? So, why is this?&lt;/p&gt;

&lt;p&gt;When a page is rendered you'll be able to view the source of that page. The code generated is the Document Object Model often referred to as the &lt;code&gt;DOM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you're loading a page this code is rendered from top to bottom. If we were to render the page in slo-mo and we had all the script tags at the top the DOM would have to effectively stop whilst it grabs all the code from the scripts. Whilst it's doing this the user will be looking at a blank screen, not good. So to improve the perceived page load time it's worth keeping scripts at the bottom.&lt;/p&gt;

&lt;p&gt;However, there may be instances where you need to include a script file at the top of the DOM or where other JavaScript code is being called from a difference source, but doing this will then mean that the script isn't aware of the code that's below it as the JavaScript has already been executed.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;$(document).ready()&lt;/code&gt; comes to use and will ensure that the code will only execute when the DOM is ready. The examples in &lt;a href=&quot;/Day-004&quot;&gt;Day 004&lt;/a&gt; take advantage of &lt;code&gt;$(document).ready()&lt;/code&gt; and also show an alternative way of writing this code.&lt;/p&gt;

&lt;p&gt;Here's a handy snippet using the alternative way for Sublime Text 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Self Invoking Anonymous Function Snippet for Sublime Text 2:

&amp;lt;snippet&amp;gt;
    &amp;lt;content&amp;gt;&amp;lt;![CDATA[(function() \{
    $0
\})();]]&amp;gt;&amp;lt;/content&amp;gt;
    &amp;lt;tabTrigger&amp;gt;siaf&amp;lt;/tabTrigger&amp;gt;
    &amp;lt;scope&amp;gt;source.js,source.js.embedded.html&amp;lt;/scope&amp;gt;
    &amp;lt;description&amp;gt;Self Invoking Anonymous Function&amp;lt;/description&amp;gt;
&amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure what Sublime Text 2 or a snippet is? Fear not! Head on over to &lt;a href=&quot;/Day-006&quot;&gt;Day 006&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 004 - No Conflict</title>
		<link href="http://365daysofjquery.github.com/Day-004"/>
		<updated>2013-01-04T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-004</id>
		<content type="html">&lt;p&gt;As mentioned previously if you open up the &lt;a href=&quot;http://code.jquery.com/jquery-1.9.0.js&quot;&gt;development version of jQuery&lt;/a&gt; and search for &lt;code&gt;:&lt;/code&gt; plus what you're looking for, in this case &lt;code&gt;noConflict:&lt;/code&gt;, you'll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;noConflict: function( deep ) {
    if ( window.$ === jQuery ) {
        window.$ = _$;
    }

    if ( deep &amp;amp;&amp;amp; window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
    }

    return jQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also worth noting the jQuery API site has just had a sweet update and searching for noConflict, you'll find:
&lt;a href=&quot;http://api.jquery.com/jQuery.noConflict/&quot;&gt;http://api.jquery.com/jQuery.noConflict/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a few times, especially in WordPress builds where I've seen people fix multiple JavaScript libraries by constantly defining jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
jQuery(function() {
    // more code referencing jQuery
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be improved using the following code to set &lt;code&gt;$&lt;/code&gt; back as an alias &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
// setting $ to alias to jQuery again
jQuery(document).ready(function($){
    $(function() {
        // now you can continue to use $ as an alias to jQuery
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another alternative that's worth mentioning is using the following code which is essentially doing the same job.
It is less descriptive, so not that great if you're a beginner trying to figure what is going on, but when you do, it's less code and widely used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
(function($) {
    $(function() {
        // now you can continue to use $ as an alias to jQuery
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More on &lt;code&gt;$(document).ready()&lt;/code&gt; in &lt;a href=&quot;/Day-005&quot;&gt;Day 005&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 003 - Give me some dollar!</title>
		<link href="http://365daysofjquery.github.com/Day-003"/>
		<updated>2013-01-03T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-003</id>
		<content type="html">&lt;p&gt;If you've looked at any jQuery code, one of the first things you'll notice is the dollar symbol &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; symbol is an alias for &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is sometimes referred to as &lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;Syntactic Sugar&lt;/a&gt;.
Whilst writing jQuery code you could write &lt;code&gt;jQuery(doSomething)&lt;/code&gt; or &lt;code&gt;$(doSomething)&lt;/code&gt;. This is incredibly helpful, meaning that every time you want to call the jQuery object you can simply type &lt;code&gt;$&lt;/code&gt;, rather than &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to note that &lt;code&gt;$&lt;/code&gt; isn't unique to jQuery and although &lt;a href=&quot;http://trends.builtwith.com/javascript&quot;&gt;it is the most popular JavaScript library&lt;/a&gt;, there are others that use the &lt;code&gt;$&lt;/code&gt; symbol as well.&lt;/p&gt;

&lt;p&gt;There's a few times, particularly when using a CMS such as WordPress or Joomla, that various plugins get installed, some of these plugins may use another JavaScript library such as MooTools. In such instances where multiple JavaScript libraries are being used the &lt;code&gt;$&lt;/code&gt; symbol can then have undesired results.&lt;/p&gt;

&lt;p&gt;Fortunately there's &lt;code&gt;jQuery.noConflict()&lt;/code&gt; which I'll elaborate on in &lt;a href=&quot;/Day-004&quot;&gt;Day 004&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 002 - Using Google's CDN to serve jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-002"/>
		<updated>2013-01-02T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-002</id>
		<content type="html">&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write('&amp;lt;script src=&quot;js/vendor/jquery-1.9.0.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;')&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Few things to note here. Firstly there's no 'http', this isn't a mistake, it's done deliberately using a 'protocol-relative URL'.
There's an excellent post on this over at Paul Irish's blog:
&lt;a href=&quot;http://paulirish.com/2010/the-protocol-relative-url/&quot;&gt;http://paulirish.com/2010/the-protocol-relative-url/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, it's a good idea to specify the version of jQuery you're using. If you always automatically update, things may break.
When a new version of jQuery is released it's always worth giving things a check over before updating.&lt;/p&gt;

&lt;p&gt;Third of all, on the second line we call jQuery again.
This is useful just in case Google's CDN version might not be available and also if you're working offline.&lt;/p&gt;

&lt;p&gt;Another great reason for using this approach is that if the user has already visited a site using the same version of jQuery you're using they'll most likely have it cached. This means they won't need to download it again, meaning one less file to download and quicker page rendering of your site.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 001 - Downloading jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-001"/>
		<updated>2013-01-01T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-001</id>
		<content type="html">&lt;p&gt;If you go to &lt;a href=&quot;http://jquery.com&quot;&gt;http://jquery.com&lt;/a&gt; you'll see two versions of the file to download 'production' and 'development'. So what's the difference and which should you use?&lt;/p&gt;

&lt;h2&gt;Production&lt;/h2&gt;

&lt;p&gt;This version is used when you come to a point where you're happy with your code and you want push it live. You can upload or deploy your code and then people will be able to access it. In this environment it's useful to use Google's CDN (more on this in &lt;a href=&quot;/day-002&quot;&gt;Day 002&lt;/a&gt;). The end goal here is to serve this file and the content to the user accessing it as quick as possible. The production file is 'minified', it takes the code from the development version and reduces it to use the least amount of characters possible. This makes it difficult when looking at the code to work out what everything's doing, but dramatically lowers the file size.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;p&gt;When building web sites / web apps (&lt;a href=&quot;http://stackoverflow.com/questions/8694922/whats-the-difference-between-a-web-site-and-a-web-application&quot;&gt;What's the difference between a web site and a web application&lt;/a&gt;) I'd recommend working locally, this allows you to test your code and make sure everything is working before showing it to the world. Whilst working this way it's often useful, especially whilst learning jQuery to view the development file. It's full of useful comments and generally any method can be found in the jQuery development version source by searching for it then adding &lt;code&gt;:&lt;/code&gt;. There are a few exceptions I believe, but not many.&lt;/p&gt;
</content>
	</entry>
	

</feed>