<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>365 Days of jQuery</title>
	<link href="http://365daysofjquery.github.com/atom.xml" rel="self"/>
	<link href="http://365daysofjquery.github.com/"/>
	<updated>2013-01-07T22:48:17+00:00</updated>
	<id>http://365daysofjquery.github.com</id>
	<author>
		<name>365 Days of jQuery</name>
	</author>
	
	<entry>
		<title>Day 007 - Tools Reading</title>
		<link href="http://365daysofjquery.github.com/Day-007"/>
		<updated>2013-01-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-007</id>
		<content type="html">&lt;p&gt;Setting up draft posts branch to save incomplete posts before going live.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 006 - Tools Writing</title>
		<link href="http://365daysofjquery.github.com/Day-006"/>
		<updated>2013-01-06T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-006</id>
		<content type="html">&lt;p&gt;Web development is getting increasingly more complicated as time goes on. Gone are the days of learning tables, then divs, then CSS properties as they are invented and introduced.&lt;/p&gt;

&lt;p&gt;Nowadays there's a &lt;code&gt;Fucking Shitload of Stuff&lt;/code&gt; (Yes, that is a technical term in case you were wondering) with a multitude of various platforms, browsers and devices to test on. Luckily there's some great tools out there to help out with your workflow.&lt;/p&gt;

&lt;p&gt;This topic could warrant its own site in itself, there's so much going on (If you're interested I've done a few &lt;a href=&quot;http://www.youtube.com/user/simonowendesign/videos&quot;&gt;screencasts&lt;/a&gt;), but for now let's concentrate on some JavaScript helpers.&lt;/p&gt;

&lt;p&gt;First thing you're going to want is a Text Editor, there's a few out there, I'd recommend &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;. Then you'll want to get &lt;a href=&quot;http://wbond.net/sublime_packages/package_control&quot;&gt;Package Control&lt;/a&gt;. Once you've installed this,  package installations are a piece of cake.&lt;/p&gt;

&lt;p&gt;Open up Sublime Text 2, then press &lt;code&gt;cmd + shift + p&lt;/code&gt;, you should see a new window open. You can then start typing and it will filter down, if you start typing &lt;code&gt;package&lt;/code&gt; you can see all the package options that are available, we're after &lt;code&gt;Package Control: Install Package&lt;/code&gt; when you have this selected hit &lt;code&gt;Enter&lt;/code&gt;. This will now go and grab all the latest packages and again you can start typing for the package you'd like to install and it will filter down.&lt;/p&gt;

&lt;p&gt;I find it handy to keep a gist of all the packages installed:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3293504.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;The main 2 packages I'd recommend for JavaScript are;
&lt;code&gt;Bracket Highlighter&lt;/code&gt;, this is useful to see where code opens and closes.
&lt;code&gt;JSLint&lt;/code&gt;, this will output helpful improvements and help debugging.&lt;/p&gt;

&lt;p&gt;When writing code you'll most likely find yourself using sections of code on a regular basis. This is where &lt;a href=&quot;http://sublimetext.info/docs/en/extensibility/snippets.html&quot;&gt;snippets&lt;/a&gt; come in handy, the snippet created in &lt;a href=&quot;/day-005&quot;&gt;Day 005&lt;/a&gt; allows you to simply type &lt;code&gt;siaf&lt;/code&gt; which will then output the code to create a Self Invoking Anonymous Function.&lt;/p&gt;

&lt;p&gt;Here's another snippet that you'll find yourself using over and over again:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4479162.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Here &lt;code&gt;cl&lt;/code&gt; creates code that allows you to &lt;code&gt;log&lt;/code&gt; to the &lt;code&gt;console&lt;/code&gt;. Not sure what the console is? You guessed it! Head on over to &lt;a href=&quot;/day-007&quot;&gt;Day 007&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 005 - Let's get ready to jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-005"/>
		<updated>2013-01-05T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-005</id>
		<content type="html">&lt;p&gt;Let's head over to the H5BP &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate/blob/master/index.html&quot;&gt;index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice all the script tags are at the bottom? So, why is this?&lt;/p&gt;

&lt;p&gt;When a page is rendered you'll be able to view the source of that page. The code generated is the Document Object Model often referred to as the &lt;code&gt;DOM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you're loading a page this code is rendered from top to bottom. If we were to render the page in slo-mo and we had all the script tags at the top the DOM would have to effectively stop whilst it grabs all the code from the scripts. Whilst it's doing this the user will be looking at a blank screen, not good. So to improve the perceived page load time it's worth keeping scripts at the bottom.&lt;/p&gt;

&lt;p&gt;However, there may be instances where you need to include a script file at the top of the DOM or where other JavaScript code is being called from a difference source, but doing this will then mean that the script isn't aware of the code that's below it as the JavaScript has already been executed.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;$(document).ready()&lt;/code&gt; comes to use and will ensure that the code will only execute when the DOM is ready. The examples in &lt;a href=&quot;/day-004&quot;&gt;Day 004&lt;/a&gt; take advantage of &lt;code&gt;$(document).ready()&lt;/code&gt; and also show an alternative way of writing this code.&lt;/p&gt;

&lt;p&gt;Here's a handy snippet using the alternative way for Sublime Text 2:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4479140.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Not sure what Sublime Text 2 or a snippet is? Fear not! Head on over to &lt;a href=&quot;/day-006&quot;&gt;Day 006&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 004 - No Conflict</title>
		<link href="http://365daysofjquery.github.com/Day-004"/>
		<updated>2013-01-04T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-004</id>
		<content type="html">&lt;p&gt;As mentioned previously if you open up the &lt;a href=&quot;http://code.jquery.com/jquery-1.8.3.js&quot;&gt;development version of jQuery&lt;/a&gt; and search for &lt;code&gt;:&lt;/code&gt; plus what you're looking for, in this case &lt;code&gt;:noConflict&lt;/code&gt;, you'll see:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4462005.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;It's also worth noting the jQuery API site has just had a sweet update and searching for noConflict, you'll find:
&lt;a href=&quot;http://api.jquery.com/jQuery.noConflict/&quot;&gt;http://api.jquery.com/jQuery.noConflict/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a few times, especially in WordPress builds where I've seen people fix multiple JavaScript libraries by constantly defining jQuery:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4467382.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;This can be improved using the following code to set &lt;code&gt;$&lt;/code&gt; back as an alias &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4467391.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Another alternative that's worth mentioning is using the following code which is essentially doing the same job.
It is less descriptive, so not that great if you're a beginner trying to figure what is going on, but when you do, it's less code and widely used.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4468045.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;More on &lt;code&gt;$(document).ready()&lt;/code&gt; in &lt;a href=&quot;/day-005&quot;&gt;Day 005&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 003 - Give me some dollar!</title>
		<link href="http://365daysofjquery.github.com/Day-003"/>
		<updated>2013-01-03T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-003</id>
		<content type="html">&lt;p&gt;If you've looked at any jQuery code, one of the first things you'll notice is the dollar symbol &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; symbol is an alias for &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is sometimes referred to as &lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;Syntactic Sugar&lt;/a&gt;.
Whilst writing jQuery code you could write &lt;code&gt;jQuery(doSomething)&lt;/code&gt; or &lt;code&gt;$(doSomething)&lt;/code&gt;. This is incredibly helpful, meaning that every time you want to call the jQuery object you can simply type &lt;code&gt;$&lt;/code&gt;, rather than &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to note that &lt;code&gt;$&lt;/code&gt; isn't unique to jQuery and although &lt;a href=&quot;http://trends.builtwith.com/javascript&quot;&gt;it is the most popular JavaScript library&lt;/a&gt;, there are others that use the &lt;code&gt;$&lt;/code&gt; symbol as well.&lt;/p&gt;

&lt;p&gt;There's a few times, particularly when using a CMS such as WordPress or Joomla, that various plugins get installed, some of these plugins may use another JavaScript library such as MooTools. In such instances where multiple JavaScript libraries are being used the &lt;code&gt;$&lt;/code&gt; symbol can then have undesired results.&lt;/p&gt;

&lt;p&gt;Fortunately there's &lt;code&gt;jQuery.noConflict()&lt;/code&gt; which I'll elaborate on in &lt;a href=&quot;/day-004&quot;&gt;Day 004&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 002 - Using Google's CDN to serve jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-002"/>
		<updated>2013-01-02T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-002</id>
		<content type="html">&lt;script src=&quot;https://gist.github.com/4458078.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;Few things to note here. Firstly there's no 'http', this isn't a mistake, it's done deliberately using a 'protocol-relative URL'.
There's an excellent post on this over at Paul Irish's blog:
&lt;a href=&quot;http://paulirish.com/2010/the-protocol-relative-url/&quot;&gt;http://paulirish.com/2010/the-protocol-relative-url/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, it's a good idea to specify the version of jQuery you're using. If you always automatically update, things may break.
When a new version of jQuery is released it's always worth giving things a check over before updating.&lt;/p&gt;

&lt;p&gt;Third of all, on the second line we call jQuery again.
This is useful just in case Google's CDN version might not be available and also if you're working offline.&lt;/p&gt;

&lt;p&gt;Another great reason for using this approach is that if the user has already visited a site using the same version of jQuery you're using they'll most likely have it cached. This means they won't need to download it again, meaning one less file to download and quicker page rendering of your site.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 001 - Downloading jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-001"/>
		<updated>2013-01-01T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-001</id>
		<content type="html">&lt;p&gt;If you go to &lt;a href=&quot;http://jquery.com&quot;&gt;http://jquery.com&lt;/a&gt; you'll see two versions of the file to download 'production' and 'development'. So what's the difference and which should you use?&lt;/p&gt;

&lt;h3&gt;Production&lt;/h3&gt;

&lt;p&gt;This version is used when you come to a point where you're happy with your code and you want push it live. You can upload or deploy your code and then people will be able to access it. In this environment it's useful to use Google's CDN (more on this in &lt;a href=&quot;/day-002&quot;&gt;Day 002&lt;/a&gt;). The end goal here is to serve this file and the content to the user accessing it as quick as possible. The production file is 'minified', it takes the code from the development version and reduces it to use the least amount of characters possible. This makes it difficult when looking at the code to work out what everything's doing, but dramatically lowers the file size.&lt;/p&gt;

&lt;h3&gt;Development&lt;/h3&gt;

&lt;p&gt;When building web sites / web apps (&lt;a href=&quot;http://stackoverflow.com/questions/8694922/whats-the-difference-between-a-web-site-and-a-web-application&quot;&gt;What's the difference between a web site and a web application&lt;/a&gt;) I'd recommend working locally, this allows you to test your code and make sure everything is working before showing it to the world. Whilst working this way it's often useful, especially whilst learning jQuery to view the development file. It's full of useful comments and generally any method can be found in the jQuery development version source by searching for it then adding &lt;code&gt;:&lt;/code&gt;. There are a few exceptions I believe, but not many.&lt;/p&gt;
</content>
	</entry>
	

</feed>