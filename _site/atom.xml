<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>365 Days of jQuery</title>
	<link href="http://365daysofjquery.github.com/atom.xml" rel="self"/>
	<link href="http://365daysofjquery.github.com/"/>
	<updated>2013-01-19T19:24:28+00:00</updated>
	<id>http://365daysofjquery.github.com</id>
	<author>
		<name>365 Days of jQuery</name>
	</author>
	
	<entry>
		<title>Day 017 - Adding HTML</title>
		<link href="http://365daysofjquery.github.com/Day-017"/>
		<updated>2013-01-17T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-017</id>
		<content type="html">&lt;p&gt;Much the same as adding text in jQuery you can also add HTML like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('body').html('&amp;lt;h1&amp;gt;Here Is Some HTML&amp;lt;/h1&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly when using &lt;code&gt;'&lt;/code&gt; you'll need to add a &lt;code&gt;\&lt;/code&gt; before it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('body').html('&amp;lt;h1&amp;gt;Here\'s Some HTML&amp;lt;h1&amp;gt;');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/demos/Day-017.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 016 - Adding Text - Apostrophe</title>
		<link href="http://365daysofjquery.github.com/Day-016"/>
		<updated>2013-01-16T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-016</id>
		<content type="html">&lt;p&gt;Notice in the &lt;a href=&quot;/Day-015&quot;&gt;previous day&lt;/a&gt; we wrapped the text we wanted to display in &lt;code&gt;'&lt;/code&gt;, but what if you need to use &lt;code&gt;'&lt;/code&gt; to be displayed in your text?&lt;/p&gt;

&lt;p&gt;This code won't work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here's some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the jQuery will look for the first &lt;code&gt;'&lt;/code&gt; to start and &lt;code&gt;'&lt;/code&gt; to end, viewing this code in the console you'll get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uncaught SyntaxError: Unexpected identifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To rectify this and display the &lt;code&gt;'&lt;/code&gt; as text you can add &lt;code&gt;\&lt;/code&gt; before like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here\'s some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/demos/Day-016.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 015 - Adding Text</title>
		<link href="http://365daysofjquery.github.com/Day-015"/>
		<updated>2013-01-15T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-015</id>
		<content type="html">&lt;p&gt;Most of the time text will come from HTML content, but on some occassions you might find it handy to write something in jQuery.&lt;/p&gt;

&lt;p&gt;Here, we call jQuery, search for a h1 tag and add some text into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').text('here is some text');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;/demos/Day-015.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 014 - camelCase</title>
		<link href="http://365daysofjquery.github.com/Day-014"/>
		<updated>2013-01-14T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-014</id>
		<content type="html">&lt;p&gt;&lt;code&gt;camelCase&lt;/code&gt; is a consistent naming convention used throughout jQuery.&lt;/p&gt;

&lt;p&gt;Starting with a lowercase letter and adding a capital to each word thereafter makes things a lot easier to read.&lt;/p&gt;

&lt;p&gt;Here's some examples without camel case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getsetattribute&lt;/li&gt;
&lt;li&gt;inlineblockneedslayout&lt;/li&gt;
&lt;li&gt;shrinkwrapblocks&lt;/li&gt;
&lt;li&gt;setattributenode&lt;/li&gt;
&lt;li&gt;scrollleft&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now again with camel case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getSetAttribute&lt;/li&gt;
&lt;li&gt;inlineBlockNeedsLayout&lt;/li&gt;
&lt;li&gt;shrinkWrapBlocks&lt;/li&gt;
&lt;li&gt;setAttributeNode&lt;/li&gt;
&lt;li&gt;scrollLeft&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Much easier to read :D&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 013 - Adding a Class</title>
		<link href="http://365daysofjquery.github.com/Day-013"/>
		<updated>2013-01-13T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-013</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;/Day-012&quot;&gt;Day 012&lt;/a&gt; you looked at how to manipulate CSS using jQuery, although it's possible to do, it's not always the best way to go about things.&lt;/p&gt;

&lt;p&gt;So let's look at how we can add a class to an element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('h1').addClass('this-is-a-h1');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the code, again calls jQuery, it then looks for a &lt;code&gt;h1&lt;/code&gt;, then tells jQuery you'd like to add a class and lastly tells jQuery what you'd like that class to be called, in this case &lt;code&gt;this-is-a-h1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Viewing the &lt;a href=&quot;/demos/Day-013.html&quot;&gt;demo&lt;/a&gt; and inspecting the h1, you'll see that although there's no class on the h1 in the original source code, jQuery adds the class name.&lt;/p&gt;

&lt;p&gt;You can now keep apply all the required styles in CSS by referencing the class name.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 012 - Manipulating CSS</title>
		<link href="http://365daysofjquery.github.com/Day-012"/>
		<updated>2013-01-12T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-012</id>
		<content type="html">&lt;p&gt;Ok, coding time!&lt;/p&gt;

&lt;p&gt;Here you'll take some text in divs and learn how to manipulate these via CSS. Although it's possible to do this, sometimes it can be better to add or change a class name, we'll look at this in &lt;a href=&quot;/Day-013&quot;&gt;Day 013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But for now take a look at this &lt;a href=&quot;/demos/Day-012.html&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red').css('color', 'red');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you could also do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('.red').css('color', 'red');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this is less code, so may seem like a good idea, performance can be improved upon by being more specific when it comes to telling jQuery what it's looking for. I'll cover this in more detail going forward, but for now let's break down the code above.&lt;/p&gt;

&lt;p&gt;First the &lt;code&gt;$&lt;/code&gt; calls to jQuery, it then tells jQuery to look for a &lt;code&gt;div&lt;/code&gt; element with a &lt;code&gt;class&lt;/code&gt; of &lt;code&gt;red&lt;/code&gt;.
When it's found that, we want to do something with the CSS, then tell it what it needs to do to the CSS, in this case change the CSS property to red.&lt;/p&gt;

&lt;p&gt;But what if you want to change more than one property?&lt;/p&gt;

&lt;p&gt;Sure, you could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red').css('color', 'red');
$('div.red').css('font-size', '30');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But rather than telling jQuery to keep searching for the same element and writing more code, there's a better way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('div.red-big-text').css({
    'color': 'red',
    'font-size': 30
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things important to note when declaring multiple properties;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The addition of &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;,&lt;/code&gt; goes to the end of the line and CSS property is split with &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No longer need to wrap numbered values in &lt;code&gt;''&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

</content>
	</entry>
	
	<entry>
		<title>Day 011 - Recap</title>
		<link href="http://365daysofjquery.github.com/Day-011"/>
		<updated>2013-01-11T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-011</id>
		<content type="html">&lt;p&gt;Right! You still with me?!&lt;/p&gt;

&lt;p&gt;Let's have a quick recap to remind yourself (myself) what you've done so far.&lt;/p&gt;

&lt;p&gt;So now, you should know how to download jQuery, how Google's CDN can help load jQuery, the difference between using &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;jQuery&lt;/code&gt;, how to avoid conflicts with other libraries and have some idea of tools that can help you out.&lt;/p&gt;

&lt;p&gt;Ok, so now you've covered the basics, now let's get stuck into some code in &lt;a href=&quot;/Day-012&quot;&gt;Day 012&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 010 - Tools - Libraries</title>
		<link href="http://365daysofjquery.github.com/Day-010"/>
		<updated>2013-01-10T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-010</id>
		<content type="html">&lt;p&gt;For accessibility it's important to note that people may have styles and, or JavaScript disabled, when writing any code you should always bear this in mind. Unfortunately not everyone in the world uses a modern browser taking advantage of all the great stuff that can be accomplished with HTML5 and CSS3, so depending on your project it's worth thinking about what browsers you're going to support.&lt;/p&gt;

&lt;h2&gt;Modernizr&lt;/h2&gt;

&lt;p&gt;Modernizr is a great JavaScript library that can help out with these issues by detecting features and adding classes to the &lt;code&gt;html&lt;/code&gt; element. Here's an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang=&quot;en&quot; dir=&quot;ltr&quot; id=&quot;modernizrcom&quot; class=&quot;js no-touch postmessage history multiplebgs boxshadow opacity cssanimations csscolumns cssgradients csstransforms csstransitions fontface localstorage sessionstorage svg inlinesvg no-blobbuilder blob bloburls download formdata wf-proximanova1proximanova2-n4-active wf-proximanova1proximanova2-i4-active wf-proximanova1proximanova2-n7-active wf-proximanova1proximanova2-i7-active wf-proximanovacondensed1proximanovacondensed2-n6-active wf-athelas1athelas2-n4-active wf-active&quot;&amp;gt;&amp;lt;head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find out how to get started with Modernizr and a full list of feature detections please visit &lt;a href=&quot;http://modernizr.com/&quot;&gt;http://modernizr.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Selectivizr&lt;/h2&gt;

&lt;p&gt;As mentioned previously not everyone uses a modern browser, Internet Explorer is a prime culprit that many users will have installed on their Windows PC and not be aware that it's possible to download another browser or upgrade and so keep on using it.&lt;/p&gt;

&lt;p&gt;Personally I'm not a fan of going back to support older browsers and adding extra code that will then have a negative impact on those using modern browsers. I opt to use the &lt;code&gt;chromeframe&lt;/code&gt; as seen in &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate/blob/master/index.html&quot;&gt;h5bp&lt;/a&gt;, where possible in order to help move the web forwards.&lt;/p&gt;

&lt;p&gt; &lt;code&gt;chromeframe&lt;/code&gt; adds a message to the top of the page for people using older browsers to go to &lt;a href=&quot;http://browsehappy.com/&quot;&gt;http://browsehappy.com/&lt;/a&gt; where they can upgrade to a modern browser.&lt;/p&gt;

&lt;p&gt;However, most of us have bills to pay and if we're working on a project where the client's requirement is to support older browsers selectivizr can help out by doing a great job at providing CSS3 selectors for Internet Explorer 6-8.&lt;/p&gt;

&lt;p&gt;To find out more visit &lt;a href=&quot;http://selectivizr.com/&quot;&gt;http://selectivizr.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Zepto&lt;/h2&gt;

&lt;p&gt;Zepto, Zepto, Zepto... Ok, this one's a bit different as in certain circumstances it can be used as a replacement for jQuery.&lt;/p&gt;

&lt;p&gt;Zepto is less than a quarter the size of jQuery in file size, it does this by focusing on only modern browsers. So if you've assessed your project's requirements and know that older browsers aren't an issue (looking at IE8 and below) you'll most likely find that you can switch to Zepto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zeptojs.com/&quot;&gt;http://zeptojs.com/&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 009 - Tools - Online</title>
		<link href="http://365daysofjquery.github.com/Day-009"/>
		<updated>2013-01-09T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-009</id>
		<content type="html">&lt;p&gt;When working on bigger projects that may contain hundreds or thousands of lines of code and you're working on something that's not quite working the way you want it, a great approach is to create a 'reduced test case'.&lt;/p&gt;

&lt;p&gt;Some awesome people have created the following sites that make it great to quickly create a reduced test case and even better, allow you to save, edit and share your code.&lt;/p&gt;

&lt;p&gt;They're also great for trying out new techniques and playing about with code that's new or you're not familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codepen.io/&quot;&gt;http://codepen.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cssdesk.com/&quot;&gt;http://cssdesk.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dabblet.com/&quot;&gt;http://dabblet.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsbin.com/&quot;&gt;http://jsbin.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/&quot;&gt;http://jsfiddle.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinkerbin.com/&quot;&gt;http://tinkerbin.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinker.io/&quot;&gt;http://tinker.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 008 - Tools - Workflow</title>
		<link href="http://365daysofjquery.github.com/Day-008"/>
		<updated>2013-01-08T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-008</id>
		<content type="html">&lt;p&gt;Whilst writing and viewing code you'll be using at least a browser and most likely a text editor.
You'll also need a way to open and navigate the files you're working on.&lt;/p&gt;

&lt;p&gt;Here's some tools you may find useful to help.&lt;/p&gt;

&lt;h2&gt;Quicksilver&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qsapp.com/&quot;&gt;http://qsapp.com/&lt;/a&gt; allows you to bring up a small popup and start typing to find things you most often use.&lt;/p&gt;

&lt;object width=&quot;420&quot; height=&quot;315&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/d0MvL_CkmnY?version=3&amp;amp;hl=en_US&amp;amp;rel=0&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/d0MvL_CkmnY?version=3&amp;amp;hl=en_US&amp;amp;rel=0&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;420&quot; height=&quot;315&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;h2&gt;Spectacle&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://spectacleapp.com/&quot;&gt;http://spectacleapp.com/&lt;/a&gt; is a real time saver, forget moving your mouse to the bottom of a window to re-size it. Setup some shortcuts and automate window re-sizing with shortcuts. Great for quickly moving your browser to the left and your text editor to the right of the screen. Here's the shortcuts I use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8515/8373621900_cd0ae36461_o.png&quot; alt=&quot;Spectacle Custom Shortcuts&quot;&gt;&lt;/p&gt;

&lt;h2&gt;LiveReload&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://livereload.com/&quot;&gt;http://livereload.com/&lt;/a&gt; again is a great time saver, when editing code in your text editor then saving, it will automatically reload your browser for you with the changes made.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 007 - Tools - Reading</title>
		<link href="http://365daysofjquery.github.com/Day-007"/>
		<updated>2013-01-07T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-007</id>
		<content type="html">&lt;p&gt;Ok, so now you've gone over some of the basics, let's get a bit of code working.&lt;/p&gt;

&lt;p&gt;Copy the following code or view the &lt;a href=&quot;/demos/Day-007.html&quot;&gt;demo&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Console Log&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;button&amp;gt;Button&amp;lt;/button&amp;gt;

&amp;lt;!-- jQuery --&amp;gt;
&amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write('&amp;lt;script src=&quot;js/jquery-1.8.3.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;')&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;

    $('button').click(function(){
        console.log('button is clicked');
    });

&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste this code into a new file, save this somewhere and open in Google Chrome.
If you don't already have Google Chrome you can download it &lt;a href=&quot;http://www.google.com/chrome&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Google Chrome you want to view the &lt;code&gt;console&lt;/code&gt;. This can be found in Google Chrome's Developer Tools &lt;code&gt;View &amp;gt; Developer &amp;gt; Developer Tools&lt;/code&gt; or use the shortcut &lt;code&gt;alt + cmd + i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default the Elements tab is selected, select the &lt;code&gt;console&lt;/code&gt; tab. Now click the &lt;code&gt;button&lt;/code&gt; that's in the browser window, you should now see the text &lt;code&gt;button is clicked&lt;/code&gt; appear in the &lt;code&gt;console&lt;/code&gt;. Awesome. This will come in very handy in future posts to work out what jQuery is outputting.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;console&lt;/code&gt; and Google Chrome Dev Tools is where I spend a vast amount of time whilst developing, it's also possible to theme. I use &lt;a href=&quot;https://github.com/simonowendesign/SO-Dark-Monokai-v3&quot;&gt;https://github.com/simonowendesign/SO-Dark-Monokai-v3&lt;/a&gt;. Still needs some work, but it's getting there.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 006 - Tools - Writing</title>
		<link href="http://365daysofjquery.github.com/Day-006"/>
		<updated>2013-01-06T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-006</id>
		<content type="html">&lt;p&gt;Web development is getting increasingly more complicated as time goes on. Gone are the days of learning tables, then divs, then CSS properties as they are invented and introduced.&lt;/p&gt;

&lt;p&gt;Nowadays there's a &lt;code&gt;Fucking Shitload of Stuff&lt;/code&gt; (Yes, that is a technical term in case you were wondering) with a multitude of various platforms, browsers and devices to test on. Luckily there's some great tools out there to help out with your workflow.&lt;/p&gt;

&lt;p&gt;This topic could warrant its own site in itself, there's so much going on (If you're interested I've done a few &lt;a href=&quot;http://www.youtube.com/user/simonowendesign/videos&quot;&gt;screencasts&lt;/a&gt;), but for now let's concentrate on some JavaScript helpers.&lt;/p&gt;

&lt;p&gt;First thing you're going to want is a Text Editor, there's a few out there, I'd recommend &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;. Then you'll want to get &lt;a href=&quot;http://wbond.net/sublime_packages/package_control&quot;&gt;Package Control&lt;/a&gt;. Once you've installed this,  package installations are a piece of cake.&lt;/p&gt;

&lt;p&gt;Open up Sublime Text 2, then press &lt;code&gt;cmd + shift + p&lt;/code&gt;, you should see a new window open. You can then start typing and it will filter down, if you start typing &lt;code&gt;package&lt;/code&gt; you can see all the package options that are available, we're after &lt;code&gt;Package Control: Install Package&lt;/code&gt; when you have this selected hit &lt;code&gt;Enter&lt;/code&gt;. This will now go and grab all the latest packages and again you can start typing for the package you'd like to install and it will filter down.&lt;/p&gt;

&lt;p&gt;I find it handy to keep a gist of all the packages installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bracket Highlighter
CSScomb
Dotfiles Syntax Highlighting
FileDiffs
JsFormat
JSLint
Package Control
Prefixr
SFTP
Side Bar
Closure Linter (Google) https://developers.google.com/closure/utilities/
SublimeLinter
Tag

Emmet (previously ZenCoding)
EditorConfig

Theme - Phoenix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main 2 packages I'd recommend for JavaScript are;
&lt;code&gt;Bracket Highlighter&lt;/code&gt;, this is useful to see where code opens and closes.
&lt;code&gt;JSLint&lt;/code&gt;, this will output helpful improvements and help debugging.&lt;/p&gt;

&lt;p&gt;As well as packages it's also possible to change the theme, I use a custom theme &lt;a href=&quot;https://github.com/simonowendesign/Monokai-Phoenix&quot;&gt;https://github.com/simonowendesign/Monokai-Phoenix&lt;/a&gt; fusing the beauty of the Monokai theme together with Phoenix which I find does a great job on improving the UI for Sublime Text 2.&lt;/p&gt;

&lt;p&gt;When writing code you'll most likely find yourself using sections of code on a regular basis. This is where &lt;a href=&quot;http://sublimetext.info/docs/en/extensibility/snippets.html&quot;&gt;snippets&lt;/a&gt; come in handy, the snippet created in &lt;a href=&quot;/Day-005&quot;&gt;Day 005&lt;/a&gt; allows you to simply type &lt;code&gt;siaf&lt;/code&gt; which will then output the code to create a Self Invoking Anonymous Function.&lt;/p&gt;

&lt;p&gt;Here's another snippet that you'll find yourself using over and over again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Console Log Snippet for Sublime Text 2:

&amp;lt;snippet&amp;gt;
    &amp;lt;content&amp;gt;&amp;lt;![CDATA[console.log($1);$0]]&amp;gt;&amp;lt;/content&amp;gt;
    &amp;lt;tabTrigger&amp;gt;cl&amp;lt;/tabTrigger&amp;gt;
    &amp;lt;scope&amp;gt;source.js,source.js.embedded.html&amp;lt;/scope&amp;gt;
    &amp;lt;description&amp;gt;console.log()&amp;lt;/description&amp;gt;
&amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;cl&lt;/code&gt; creates code that allows you to &lt;code&gt;log&lt;/code&gt; to the &lt;code&gt;console&lt;/code&gt;. Not sure what the console is? You guessed it! Head on over to &lt;a href=&quot;/Day-007&quot;&gt;Day 007&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 005 - Let's get ready to jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-005"/>
		<updated>2013-01-05T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-005</id>
		<content type="html">&lt;p&gt;Let's head over to the H5BP &lt;a href=&quot;https://github.com/h5bp/html5-boilerplate/blob/master/index.html&quot;&gt;index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice all the script tags are at the bottom? So, why is this?&lt;/p&gt;

&lt;p&gt;When a page is rendered you'll be able to view the source of that page. The code generated is the Document Object Model often referred to as the &lt;code&gt;DOM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you're loading a page this code is rendered from top to bottom. If we were to render the page in slo-mo and we had all the script tags at the top the DOM would have to effectively stop whilst it grabs all the code from the scripts. Whilst it's doing this the user will be looking at a blank screen, not good. So to improve the perceived page load time it's worth keeping scripts at the bottom.&lt;/p&gt;

&lt;p&gt;However, there may be instances where you need to include a script file at the top of the DOM or where other JavaScript code is being called from a difference source, but doing this will then mean that the script isn't aware of the code that's below it as the JavaScript has already been executed.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;$(document).ready()&lt;/code&gt; comes to use and will ensure that the code will only execute when the DOM is ready. The examples in &lt;a href=&quot;/Day-004&quot;&gt;Day 004&lt;/a&gt; take advantage of &lt;code&gt;$(document).ready()&lt;/code&gt; and also show an alternative way of writing this code.&lt;/p&gt;

&lt;p&gt;Here's a handy snippet using the alternative way for Sublime Text 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Self Invoking Anonymous Function Snippet for Sublime Text 2:

&amp;lt;snippet&amp;gt;
    &amp;lt;content&amp;gt;&amp;lt;![CDATA[(function() \{
    $0
\})();]]&amp;gt;&amp;lt;/content&amp;gt;
    &amp;lt;tabTrigger&amp;gt;siaf&amp;lt;/tabTrigger&amp;gt;
    &amp;lt;scope&amp;gt;source.js,source.js.embedded.html&amp;lt;/scope&amp;gt;
    &amp;lt;description&amp;gt;Self Invoking Anonymous Function&amp;lt;/description&amp;gt;
&amp;lt;/snippet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure what Sublime Text 2 or a snippet is? Fear not! Head on over to &lt;a href=&quot;/Day-006&quot;&gt;Day 006&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 004 - No Conflict</title>
		<link href="http://365daysofjquery.github.com/Day-004"/>
		<updated>2013-01-04T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-004</id>
		<content type="html">&lt;p&gt;As mentioned previously if you open up the &lt;a href=&quot;http://code.jquery.com/jquery-1.8.3.js&quot;&gt;development version of jQuery&lt;/a&gt; and search for &lt;code&gt;:&lt;/code&gt; plus what you're looking for, in this case &lt;code&gt;noConflict:&lt;/code&gt;, you'll see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;noConflict: function( deep ) {
    if ( window.$ === jQuery ) {
        window.$ = _$;
    }

    if ( deep &amp;amp;&amp;amp; window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
    }

    return jQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also worth noting the jQuery API site has just had a sweet update and searching for noConflict, you'll find:
&lt;a href=&quot;http://api.jquery.com/jQuery.noConflict/&quot;&gt;http://api.jquery.com/jQuery.noConflict/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a few times, especially in WordPress builds where I've seen people fix multiple JavaScript libraries by constantly defining jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
jQuery(function() {
    // more code referencing jQuery
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be improved using the following code to set &lt;code&gt;$&lt;/code&gt; back as an alias &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
// setting $ to alias to jQuery again
jQuery(document).ready(function($){
    $(function() {
        // now you can continue to use $ as an alias to jQuery
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another alternative that's worth mentioning is using the following code which is essentially doing the same job.
It is less descriptive, so not that great if you're a beginner trying to figure what is going on, but when you do, it's less code and widely used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.noConflict();
(function($) {
    $(function() {
        // now you can continue to use $ as an alias to jQuery
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More on &lt;code&gt;$(document).ready()&lt;/code&gt; in &lt;a href=&quot;/Day-005&quot;&gt;Day 005&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 003 - Give me some dollar!</title>
		<link href="http://365daysofjquery.github.com/Day-003"/>
		<updated>2013-01-03T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-003</id>
		<content type="html">&lt;p&gt;If you've looked at any jQuery code, one of the first things you'll notice is the dollar symbol &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; symbol is an alias for &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is sometimes referred to as &lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;Syntactic Sugar&lt;/a&gt;.
Whilst writing jQuery code you could write &lt;code&gt;jQuery(doSomething)&lt;/code&gt; or &lt;code&gt;$(doSomething)&lt;/code&gt;. This is incredibly helpful, meaning that every time you want to call the jQuery object you can simply type &lt;code&gt;$&lt;/code&gt;, rather than &lt;code&gt;jQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to note that &lt;code&gt;$&lt;/code&gt; isn't unique to jQuery and although &lt;a href=&quot;http://trends.builtwith.com/javascript&quot;&gt;it is the most popular JavaScript library&lt;/a&gt;, there are others that use the &lt;code&gt;$&lt;/code&gt; symbol as well.&lt;/p&gt;

&lt;p&gt;There's a few times, particularly when using a CMS such as WordPress or Joomla, that various plugins get installed, some of these plugins may use another JavaScript library such as MooTools. In such instances where multiple JavaScript libraries are being used the &lt;code&gt;$&lt;/code&gt; symbol can then have undesired results.&lt;/p&gt;

&lt;p&gt;Fortunately there's &lt;code&gt;jQuery.noConflict()&lt;/code&gt; which I'll elaborate on in &lt;a href=&quot;/Day-004&quot;&gt;Day 004&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 002 - Using Google's CDN to serve jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-002"/>
		<updated>2013-01-02T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-002</id>
		<content type="html">&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write('&amp;lt;script src=&quot;js/vendor/jquery-1.8.3.min.js&quot;&amp;gt;&amp;lt;\/script&amp;gt;')&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Few things to note here. Firstly there's no 'http', this isn't a mistake, it's done deliberately using a 'protocol-relative URL'.
There's an excellent post on this over at Paul Irish's blog:
&lt;a href=&quot;http://paulirish.com/2010/the-protocol-relative-url/&quot;&gt;http://paulirish.com/2010/the-protocol-relative-url/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, it's a good idea to specify the version of jQuery you're using. If you always automatically update, things may break.
When a new version of jQuery is released it's always worth giving things a check over before updating.&lt;/p&gt;

&lt;p&gt;Third of all, on the second line we call jQuery again.
This is useful just in case Google's CDN version might not be available and also if you're working offline.&lt;/p&gt;

&lt;p&gt;Another great reason for using this approach is that if the user has already visited a site using the same version of jQuery you're using they'll most likely have it cached. This means they won't need to download it again, meaning one less file to download and quicker page rendering of your site.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 001 - Downloading jQuery</title>
		<link href="http://365daysofjquery.github.com/Day-001"/>
		<updated>2013-01-01T00:00:00+00:00</updated>
		<id>http://365daysofjquery.github.com/Day-001</id>
		<content type="html">&lt;p&gt;If you go to &lt;a href=&quot;http://jquery.com&quot;&gt;http://jquery.com&lt;/a&gt; you'll see two versions of the file to download 'production' and 'development'. So what's the difference and which should you use?&lt;/p&gt;

&lt;h2&gt;Production&lt;/h2&gt;

&lt;p&gt;This version is used when you come to a point where you're happy with your code and you want push it live. You can upload or deploy your code and then people will be able to access it. In this environment it's useful to use Google's CDN (more on this in &lt;a href=&quot;/day-002&quot;&gt;Day 002&lt;/a&gt;). The end goal here is to serve this file and the content to the user accessing it as quick as possible. The production file is 'minified', it takes the code from the development version and reduces it to use the least amount of characters possible. This makes it difficult when looking at the code to work out what everything's doing, but dramatically lowers the file size.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;p&gt;When building web sites / web apps (&lt;a href=&quot;http://stackoverflow.com/questions/8694922/whats-the-difference-between-a-web-site-and-a-web-application&quot;&gt;What's the difference between a web site and a web application&lt;/a&gt;) I'd recommend working locally, this allows you to test your code and make sure everything is working before showing it to the world. Whilst working this way it's often useful, especially whilst learning jQuery to view the development file. It's full of useful comments and generally any method can be found in the jQuery development version source by searching for it then adding &lt;code&gt;:&lt;/code&gt;. There are a few exceptions I believe, but not many.&lt;/p&gt;
</content>
	</entry>
	

</feed>